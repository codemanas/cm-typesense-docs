{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Installation Minimum Requirements PHP 7.2 or greater is recommended MySQL 5.6 or greater is recommended Automatic Installation Go to WordPress Plugins > Add New Search for \"Plugin name\" Click Install and then activate Plugin Manual Installation If for some reason automatic installation is not possible, go to wordpress.org and you will see the download button. Clicking download button will provide you with a zip file of the plugin then. Go to WordPress Plugins > Add New and click upload plugin. Click upload plugin and then add the zip file The plugin will then be installed, then activate the plugin.","title":"Installation"},{"location":"#installation","text":"","title":"Installation"},{"location":"#minimum-requirements","text":"PHP 7.2 or greater is recommended MySQL 5.6 or greater is recommended","title":"Minimum Requirements"},{"location":"#automatic-installation","text":"Go to WordPress Plugins > Add New Search for \"Plugin name\" Click Install and then activate Plugin","title":"Automatic Installation"},{"location":"#manual-installation","text":"If for some reason automatic installation is not possible, go to wordpress.org and you will see the download button. Clicking download button will provide you with a zip file of the plugin then. Go to WordPress Plugins > Add New and click upload plugin. Click upload plugin and then add the zip file The plugin will then be installed, then activate the plugin.","title":"Manual Installation"},{"location":"advanced-custom-post-types/","text":"Adding Custom Post Type Introduction By default, the plugin supports posts and pages for indexing. Adding additional / custom post types can be achieve via filter hooks. There are three things you should be aware of. Adding the custom post type to available post types for indexing Adding schema for your custom post type Formatting data before documents are added For this guide - we have assumed that the custom post type is book, please note that the slug of custom post type is quite important. /** * Register a custom post type called \"book\". * * @see get_post_type_labels() for label keys. */ function wp_docs_codex_book_init() { $labels = array( 'name' => _x( 'Books', 'Post type general name', 'textdomain' ), 'singular_name' => _x( 'Book', 'Post type singular name', 'textdomain' ), 'menu_name' => _x( 'Books', 'Admin Menu text', 'textdomain' ), 'name_admin_bar' => _x( 'Book', 'Add New on Toolbar', 'textdomain' ), 'add_new' => __( 'Add New', 'textdomain' ), 'add_new_item' => __( 'Add New Book', 'textdomain' ), 'new_item' => __( 'New Book', 'textdomain' ), 'edit_item' => __( 'Edit Book', 'textdomain' ), 'view_item' => __( 'View Book', 'textdomain' ), 'all_items' => __( 'All Books', 'textdomain' ), 'search_items' => __( 'Search Books', 'textdomain' ), 'parent_item_colon' => __( 'Parent Books:', 'textdomain' ), 'not_found' => __( 'No books found.', 'textdomain' ), 'not_found_in_trash' => __( 'No books found in Trash.', 'textdomain' ), 'featured_image' => _x( 'Book Cover Image', 'Overrides the \u201cFeatured Image\u201d phrase for this post type. Added in 4.3', 'textdomain' ), 'set_featured_image' => _x( 'Set cover image', 'Overrides the \u201cSet featured image\u201d phrase for this post type. Added in 4.3', 'textdomain' ), 'remove_featured_image' => _x( 'Remove cover image', 'Overrides the \u201cRemove featured image\u201d phrase for this post type. Added in 4.3', 'textdomain' ), 'use_featured_image' => _x( 'Use as cover image', 'Overrides the \u201cUse as featured image\u201d phrase for this post type. Added in 4.3', 'textdomain' ), 'archives' => _x( 'Book archives', 'The post type archive label used in nav menus. Default \u201cPost Archives\u201d. Added in 4.4', 'textdomain' ), 'insert_into_item' => _x( 'Insert into book', 'Overrides the \u201cInsert into post\u201d/\u201dInsert into page\u201d phrase (used when inserting media into a post). Added in 4.4', 'textdomain' ), 'uploaded_to_this_item' => _x( 'Uploaded to this book', 'Overrides the \u201cUploaded to this post\u201d/\u201dUploaded to this page\u201d phrase (used when viewing media attached to a post). Added in 4.4', 'textdomain' ), 'filter_items_list' => _x( 'Filter books list', 'Screen reader text for the filter links heading on the post type listing screen. Default \u201cFilter posts list\u201d/\u201dFilter pages list\u201d. Added in 4.4', 'textdomain' ), 'items_list_navigation' => _x( 'Books list navigation', 'Screen reader text for the pagination heading on the post type listing screen. Default \u201cPosts list navigation\u201d/\u201dPages list navigation\u201d. Added in 4.4', 'textdomain' ), 'items_list' => _x( 'Books list', 'Screen reader text for the items list heading on the post type listing screen. Default \u201cPosts list\u201d/\u201dPages list\u201d. Added in 4.4', 'textdomain' ), ); $args = array( 'labels' => $labels, 'public' => true, 'publicly_queryable' => true, 'show_ui' => true, 'show_in_menu' => true, 'query_var' => true, 'rewrite' => array( 'slug' => 'book' ), 'capability_type' => 'post', 'has_archive' => true, 'hierarchical' => false, 'menu_position' => null, 'supports' => array( 'title', 'editor', 'author', 'thumbnail', 'excerpt', 'comments' ), ); register_post_type( 'book', $args ); } add_action( 'init', 'wp_docs_codex_book_init' ); /** * Create two taxonomies, genres and writers for the post type \"book\". * * @see register_post_type() for registering custom post types. */ function wp_docs_create_book_taxonomies() { // Add new taxonomy, make it hierarchical (like categories) $labels = array( 'name' => _x( 'Genres', 'taxonomy general name', 'textdomain' ), 'singular_name' => _x( 'Genre', 'taxonomy singular name', 'textdomain' ), 'search_items' => __( 'Search Genres', 'textdomain' ), 'all_items' => __( 'All Genres', 'textdomain' ), 'parent_item' => __( 'Parent Genre', 'textdomain' ), 'parent_item_colon' => __( 'Parent Genre:', 'textdomain' ), 'edit_item' => __( 'Edit Genre', 'textdomain' ), 'update_item' => __( 'Update Genre', 'textdomain' ), 'add_new_item' => __( 'Add New Genre', 'textdomain' ), 'new_item_name' => __( 'New Genre Name', 'textdomain' ), 'menu_name' => __( 'Genre', 'textdomain' ), ); $args = array( 'hierarchical' => true, 'labels' => $labels, 'show_ui' => true, 'show_admin_column' => true, 'query_var' => true, 'rewrite' => array( 'slug' => 'genre' ), ); register_taxonomy( 'genre', array( 'book' ), $args ); unset( $args ); unset( $labels ); // Add new taxonomy, NOT hierarchical (like tags) $labels = array( 'name' => _x( 'Writers', 'taxonomy general name', 'textdomain' ), 'singular_name' => _x( 'Writer', 'taxonomy singular name', 'textdomain' ), 'search_items' => __( 'Search Writers', 'textdomain' ), 'popular_items' => __( 'Popular Writers', 'textdomain' ), 'all_items' => __( 'All Writers', 'textdomain' ), 'parent_item' => null, 'parent_item_colon' => null, 'edit_item' => __( 'Edit Writer', 'textdomain' ), 'update_item' => __( 'Update Writer', 'textdomain' ), 'add_new_item' => __( 'Add New Writer', 'textdomain' ), 'new_item_name' => __( 'New Writer Name', 'textdomain' ), 'separate_items_with_commas' => __( 'Separate writers with commas', 'textdomain' ), 'add_or_remove_items' => __( 'Add or remove writers', 'textdomain' ), 'choose_from_most_used' => __( 'Choose from the most used writers', 'textdomain' ), 'not_found' => __( 'No writers found.', 'textdomain' ), 'menu_name' => __( 'Writers', 'textdomain' ), ); $args = array( 'hierarchical' => false, 'labels' => $labels, 'show_ui' => true, 'show_admin_column' => true, 'update_count_callback' => '_update_post_term_count', 'query_var' => true, 'rewrite' => array( 'slug' => 'writer' ), ); register_taxonomy( 'writer', 'book', $args ); } // hook into the init action and call create_book_taxonomies when it fires add_action( 'init', 'wp_docs_create_book_taxonomies', 0 ); Adding Custom Post Type The hook in question to use is : cm_typesense_available_post_types /*** Adds the post type book under available post_types ***/ function cm_typesense_add_available_post_types( $available_post_types ) { $available_post_types['book'] = [ 'label' => 'Book', 'value' => 'book' ]; return $available_post_types; } add_filter( 'cm_typesense_available_post_types', 'cm_typesense_add_available_post_types'); This will add your custom post type to the available post types dropdown in the backend. Which will allow you to enable the post type and index it. IMPORTANT NOTE: Please note the index and value MUST be the post_slug Result: Adding Schema Your schema for the custom post type would most likely need to be different for your custom post type. For example you may want to send custom taxonomies as facets for your post type. To do so you will need to modify / add your schema - BEFORE - any indexing is done IMPORTANT NOTE: SCHEMA NEEDS TO BE DEFINED BEFORE COLLECTION IS CREATED. //only necessary if the default post schema is not necessary function cm_typesense_add_book_schema( $schema, $name ) { if ( $name == 'book' ) { $schema = [ 'name' => 'book', 'fields' => [ [ 'name' => 'post_content', 'type' => 'string' ], [ 'name' => 'post_title', 'type' => 'string' ], [ 'name' => 'post_type', 'type' => 'string' ], [ 'name' => 'post_author', 'type' => 'string' ], [ 'name' => 'comment_count', 'type' => 'int64' ], [ 'name' => 'is_sticky', 'type' => 'int32' ], [ 'name' => 'post_excerpt', 'type' => 'string' ], [ 'name' => 'post_date', 'type' => 'string' ], [ 'name' => 'post_id', 'type' => 'string' ], [ 'name' => 'post_modified', 'type' => 'string' ], [ 'name' => 'id', 'type' => 'string' ], [ 'name' => 'permalink', 'type' => 'string' ], [ 'name' => 'post_thumbnail', 'type' => 'string' ], [ 'name' => 'genre', 'type' => 'string[]', 'facet' => true ] ], 'default_sorting_field' => 'comment_count' ]; } return $schema; } add_filter( 'cm_typesense_schema', 'cm_typesense_add_book_schema', 10, 2 ); In the example above - you can see genre is being sent as a facet. \"genre\" is the custom taxonomy attached to the book post type. Formatting Data //you can modify the code as needed //if your schema is simillar to the default post type then you should only change what fields you need to add //example here we are only adding genre function cm_typesense_format_book_data ( $formatted_data, $raw_data, $object_id, $schema_name ) { if ( $schema_name == 'book' ) { $terms = get_the_terms( $object_id, 'genre' ); $genres = []; foreach ( $terms as $term ) { $genres[] = $term->name; } $formatted_data['genre'] = $genres; } return $formatted_data; } add_filter( 'cm_typesense_data_before_entry', 'cm_typesense_format_book_data', 10, 4 );","title":"Adding Custom Post Types"},{"location":"advanced-custom-post-types/#adding-custom-post-type","text":"","title":"Adding Custom Post Type"},{"location":"advanced-custom-post-types/#introduction","text":"By default, the plugin supports posts and pages for indexing. Adding additional / custom post types can be achieve via filter hooks. There are three things you should be aware of. Adding the custom post type to available post types for indexing Adding schema for your custom post type Formatting data before documents are added For this guide - we have assumed that the custom post type is book, please note that the slug of custom post type is quite important. /** * Register a custom post type called \"book\". * * @see get_post_type_labels() for label keys. */ function wp_docs_codex_book_init() { $labels = array( 'name' => _x( 'Books', 'Post type general name', 'textdomain' ), 'singular_name' => _x( 'Book', 'Post type singular name', 'textdomain' ), 'menu_name' => _x( 'Books', 'Admin Menu text', 'textdomain' ), 'name_admin_bar' => _x( 'Book', 'Add New on Toolbar', 'textdomain' ), 'add_new' => __( 'Add New', 'textdomain' ), 'add_new_item' => __( 'Add New Book', 'textdomain' ), 'new_item' => __( 'New Book', 'textdomain' ), 'edit_item' => __( 'Edit Book', 'textdomain' ), 'view_item' => __( 'View Book', 'textdomain' ), 'all_items' => __( 'All Books', 'textdomain' ), 'search_items' => __( 'Search Books', 'textdomain' ), 'parent_item_colon' => __( 'Parent Books:', 'textdomain' ), 'not_found' => __( 'No books found.', 'textdomain' ), 'not_found_in_trash' => __( 'No books found in Trash.', 'textdomain' ), 'featured_image' => _x( 'Book Cover Image', 'Overrides the \u201cFeatured Image\u201d phrase for this post type. Added in 4.3', 'textdomain' ), 'set_featured_image' => _x( 'Set cover image', 'Overrides the \u201cSet featured image\u201d phrase for this post type. Added in 4.3', 'textdomain' ), 'remove_featured_image' => _x( 'Remove cover image', 'Overrides the \u201cRemove featured image\u201d phrase for this post type. Added in 4.3', 'textdomain' ), 'use_featured_image' => _x( 'Use as cover image', 'Overrides the \u201cUse as featured image\u201d phrase for this post type. Added in 4.3', 'textdomain' ), 'archives' => _x( 'Book archives', 'The post type archive label used in nav menus. Default \u201cPost Archives\u201d. Added in 4.4', 'textdomain' ), 'insert_into_item' => _x( 'Insert into book', 'Overrides the \u201cInsert into post\u201d/\u201dInsert into page\u201d phrase (used when inserting media into a post). Added in 4.4', 'textdomain' ), 'uploaded_to_this_item' => _x( 'Uploaded to this book', 'Overrides the \u201cUploaded to this post\u201d/\u201dUploaded to this page\u201d phrase (used when viewing media attached to a post). Added in 4.4', 'textdomain' ), 'filter_items_list' => _x( 'Filter books list', 'Screen reader text for the filter links heading on the post type listing screen. Default \u201cFilter posts list\u201d/\u201dFilter pages list\u201d. Added in 4.4', 'textdomain' ), 'items_list_navigation' => _x( 'Books list navigation', 'Screen reader text for the pagination heading on the post type listing screen. Default \u201cPosts list navigation\u201d/\u201dPages list navigation\u201d. Added in 4.4', 'textdomain' ), 'items_list' => _x( 'Books list', 'Screen reader text for the items list heading on the post type listing screen. Default \u201cPosts list\u201d/\u201dPages list\u201d. Added in 4.4', 'textdomain' ), ); $args = array( 'labels' => $labels, 'public' => true, 'publicly_queryable' => true, 'show_ui' => true, 'show_in_menu' => true, 'query_var' => true, 'rewrite' => array( 'slug' => 'book' ), 'capability_type' => 'post', 'has_archive' => true, 'hierarchical' => false, 'menu_position' => null, 'supports' => array( 'title', 'editor', 'author', 'thumbnail', 'excerpt', 'comments' ), ); register_post_type( 'book', $args ); } add_action( 'init', 'wp_docs_codex_book_init' ); /** * Create two taxonomies, genres and writers for the post type \"book\". * * @see register_post_type() for registering custom post types. */ function wp_docs_create_book_taxonomies() { // Add new taxonomy, make it hierarchical (like categories) $labels = array( 'name' => _x( 'Genres', 'taxonomy general name', 'textdomain' ), 'singular_name' => _x( 'Genre', 'taxonomy singular name', 'textdomain' ), 'search_items' => __( 'Search Genres', 'textdomain' ), 'all_items' => __( 'All Genres', 'textdomain' ), 'parent_item' => __( 'Parent Genre', 'textdomain' ), 'parent_item_colon' => __( 'Parent Genre:', 'textdomain' ), 'edit_item' => __( 'Edit Genre', 'textdomain' ), 'update_item' => __( 'Update Genre', 'textdomain' ), 'add_new_item' => __( 'Add New Genre', 'textdomain' ), 'new_item_name' => __( 'New Genre Name', 'textdomain' ), 'menu_name' => __( 'Genre', 'textdomain' ), ); $args = array( 'hierarchical' => true, 'labels' => $labels, 'show_ui' => true, 'show_admin_column' => true, 'query_var' => true, 'rewrite' => array( 'slug' => 'genre' ), ); register_taxonomy( 'genre', array( 'book' ), $args ); unset( $args ); unset( $labels ); // Add new taxonomy, NOT hierarchical (like tags) $labels = array( 'name' => _x( 'Writers', 'taxonomy general name', 'textdomain' ), 'singular_name' => _x( 'Writer', 'taxonomy singular name', 'textdomain' ), 'search_items' => __( 'Search Writers', 'textdomain' ), 'popular_items' => __( 'Popular Writers', 'textdomain' ), 'all_items' => __( 'All Writers', 'textdomain' ), 'parent_item' => null, 'parent_item_colon' => null, 'edit_item' => __( 'Edit Writer', 'textdomain' ), 'update_item' => __( 'Update Writer', 'textdomain' ), 'add_new_item' => __( 'Add New Writer', 'textdomain' ), 'new_item_name' => __( 'New Writer Name', 'textdomain' ), 'separate_items_with_commas' => __( 'Separate writers with commas', 'textdomain' ), 'add_or_remove_items' => __( 'Add or remove writers', 'textdomain' ), 'choose_from_most_used' => __( 'Choose from the most used writers', 'textdomain' ), 'not_found' => __( 'No writers found.', 'textdomain' ), 'menu_name' => __( 'Writers', 'textdomain' ), ); $args = array( 'hierarchical' => false, 'labels' => $labels, 'show_ui' => true, 'show_admin_column' => true, 'update_count_callback' => '_update_post_term_count', 'query_var' => true, 'rewrite' => array( 'slug' => 'writer' ), ); register_taxonomy( 'writer', 'book', $args ); } // hook into the init action and call create_book_taxonomies when it fires add_action( 'init', 'wp_docs_create_book_taxonomies', 0 );","title":"Introduction"},{"location":"advanced-custom-post-types/#adding-custom-post-type_1","text":"The hook in question to use is : cm_typesense_available_post_types /*** Adds the post type book under available post_types ***/ function cm_typesense_add_available_post_types( $available_post_types ) { $available_post_types['book'] = [ 'label' => 'Book', 'value' => 'book' ]; return $available_post_types; } add_filter( 'cm_typesense_available_post_types', 'cm_typesense_add_available_post_types'); This will add your custom post type to the available post types dropdown in the backend. Which will allow you to enable the post type and index it. IMPORTANT NOTE: Please note the index and value MUST be the post_slug Result:","title":"Adding Custom Post Type"},{"location":"advanced-custom-post-types/#adding-schema","text":"Your schema for the custom post type would most likely need to be different for your custom post type. For example you may want to send custom taxonomies as facets for your post type. To do so you will need to modify / add your schema - BEFORE - any indexing is done IMPORTANT NOTE: SCHEMA NEEDS TO BE DEFINED BEFORE COLLECTION IS CREATED. //only necessary if the default post schema is not necessary function cm_typesense_add_book_schema( $schema, $name ) { if ( $name == 'book' ) { $schema = [ 'name' => 'book', 'fields' => [ [ 'name' => 'post_content', 'type' => 'string' ], [ 'name' => 'post_title', 'type' => 'string' ], [ 'name' => 'post_type', 'type' => 'string' ], [ 'name' => 'post_author', 'type' => 'string' ], [ 'name' => 'comment_count', 'type' => 'int64' ], [ 'name' => 'is_sticky', 'type' => 'int32' ], [ 'name' => 'post_excerpt', 'type' => 'string' ], [ 'name' => 'post_date', 'type' => 'string' ], [ 'name' => 'post_id', 'type' => 'string' ], [ 'name' => 'post_modified', 'type' => 'string' ], [ 'name' => 'id', 'type' => 'string' ], [ 'name' => 'permalink', 'type' => 'string' ], [ 'name' => 'post_thumbnail', 'type' => 'string' ], [ 'name' => 'genre', 'type' => 'string[]', 'facet' => true ] ], 'default_sorting_field' => 'comment_count' ]; } return $schema; } add_filter( 'cm_typesense_schema', 'cm_typesense_add_book_schema', 10, 2 ); In the example above - you can see genre is being sent as a facet. \"genre\" is the custom taxonomy attached to the book post type.","title":"Adding Schema"},{"location":"advanced-custom-post-types/#formatting-data","text":"//you can modify the code as needed //if your schema is simillar to the default post type then you should only change what fields you need to add //example here we are only adding genre function cm_typesense_format_book_data ( $formatted_data, $raw_data, $object_id, $schema_name ) { if ( $schema_name == 'book' ) { $terms = get_the_terms( $object_id, 'genre' ); $genres = []; foreach ( $terms as $term ) { $genres[] = $term->name; } $formatted_data['genre'] = $genres; } return $formatted_data; } add_filter( 'cm_typesense_data_before_entry', 'cm_typesense_format_book_data', 10, 4 );","title":"Formatting Data"},{"location":"getting-started/","text":"Getting Started Generate API Keys Before you do anything else, you must first add the API keys and configure the node. If you are hosting typesense locally / on your own server. Then please see the steps here to generate API Keys https://typesense.org/docs/0.22.1/api/api-keys.html Otherwise, if you have gone with typesense cloud option - then once the cluster is set up. There will be an option to generate your API keys. Above Shows overview of API Keys Clicking \"Generate API Keys\" - will generate and download API Keys to be used. Keep this file safe and secure for future use. The Text file will have the following information Protocol: [https] Port: [443] Admin API Key Search Only API Key Node Configuring Plugin Saving Settings After retrieving the required info go to WordPress > Admin Area > Typesense > Settings You will be guided to a page like so. Here - enter the details provided in the text file and click save. Your WordPress install will now be able to connect to your typensese instance. Setup Autocomplete and Indexing The next step is to enable and start indexing your posts. Going to Admin Area > Typesense Here you can Enable which post types should be indexed Bulk index the selected post types Hijack WordPress Search to show autocomplete Enable Post Types This option allows you to select which post types to index. By default the plugin allows you to index posts and pages. Pro version of the plugin will be needed to index custom post types. Bulk Index Bulk Index option allows you to index all posts(post types) at once. Indexing means they will add the document into typesense instant to be easily retrieved. Hijack WordPress Search When this option is enabled it will replace all search forms that use default WordPress search with autocomplete.","title":"Getting Started"},{"location":"getting-started/#getting-started","text":"","title":"Getting Started"},{"location":"getting-started/#generate-api-keys","text":"Before you do anything else, you must first add the API keys and configure the node. If you are hosting typesense locally / on your own server. Then please see the steps here to generate API Keys https://typesense.org/docs/0.22.1/api/api-keys.html Otherwise, if you have gone with typesense cloud option - then once the cluster is set up. There will be an option to generate your API keys. Above Shows overview of API Keys Clicking \"Generate API Keys\" - will generate and download API Keys to be used. Keep this file safe and secure for future use. The Text file will have the following information Protocol: [https] Port: [443] Admin API Key Search Only API Key Node","title":"Generate API Keys"},{"location":"getting-started/#configuring-plugin","text":"","title":"Configuring Plugin"},{"location":"getting-started/#saving-settings","text":"After retrieving the required info go to WordPress > Admin Area > Typesense > Settings You will be guided to a page like so. Here - enter the details provided in the text file and click save. Your WordPress install will now be able to connect to your typensese instance.","title":"Saving Settings"},{"location":"getting-started/#setup-autocomplete-and-indexing","text":"The next step is to enable and start indexing your posts. Going to Admin Area > Typesense Here you can Enable which post types should be indexed Bulk index the selected post types Hijack WordPress Search to show autocomplete","title":"Setup Autocomplete and Indexing"},{"location":"getting-started/#enable-post-types","text":"This option allows you to select which post types to index. By default the plugin allows you to index posts and pages. Pro version of the plugin will be needed to index custom post types.","title":"Enable Post Types"},{"location":"getting-started/#bulk-index","text":"Bulk Index option allows you to index all posts(post types) at once. Indexing means they will add the document into typesense instant to be easily retrieved.","title":"Bulk Index"},{"location":"getting-started/#hijack-wordpress-search","text":"When this option is enabled it will replace all search forms that use default WordPress search with autocomplete.","title":"Hijack WordPress Search"},{"location":"shortcode/","text":"Shortcodes Instant Search Shortcode [cm_typesense_search post_types=\"book,post\" filter=\"show\" per_page=\"3\" sortby=\"off\"] Options: cols Values: 1 to 5 Description: Determines how may results to show per row Default: 3 post_types Values: Post Slugs e.g. post,page,book Description: accepts enabled post_type slugs to show in instant search, accepts multiple slugs in comma separated form post,page,slug If multiple sources are enabled - filtering is disabled. Default: All enabled post_types filter Values: show or hide Description: accepts \"show\" or \"hide\" - determines if facet/category filtering should be shown. Default: hide per_page Description: Determines no of possible/matched results to show per_page Default: 3 sortby Values: show or hide Description: Determines whether to provide a sorting option - by default sorting option is according to post published Default: show pagination Values: show or hide Description: Determines whether to show or hide the pagination for results Default: show Autocomplete Shortcode [cm_typesense_autocomplete] Description: Add the Autocomplete form wherever you may want to. There are no other options.","title":"Shortcode"},{"location":"shortcode/#shortcodes","text":"","title":"Shortcodes"},{"location":"shortcode/#instant-search","text":"","title":"Instant Search"},{"location":"shortcode/#shortcode","text":"[cm_typesense_search post_types=\"book,post\" filter=\"show\" per_page=\"3\" sortby=\"off\"]","title":"Shortcode"},{"location":"shortcode/#options","text":"","title":"Options:"},{"location":"shortcode/#cols","text":"Values: 1 to 5 Description: Determines how may results to show per row Default: 3","title":"cols"},{"location":"shortcode/#post_types","text":"Values: Post Slugs e.g. post,page,book Description: accepts enabled post_type slugs to show in instant search, accepts multiple slugs in comma separated form post,page,slug If multiple sources are enabled - filtering is disabled. Default: All enabled post_types","title":"post_types"},{"location":"shortcode/#filter","text":"Values: show or hide Description: accepts \"show\" or \"hide\" - determines if facet/category filtering should be shown. Default: hide","title":"filter"},{"location":"shortcode/#per_page","text":"Description: Determines no of possible/matched results to show per_page Default: 3","title":"per_page"},{"location":"shortcode/#sortby","text":"Values: show or hide Description: Determines whether to provide a sorting option - by default sorting option is according to post published Default: show","title":"sortby"},{"location":"shortcode/#pagination","text":"Values: show or hide Description: Determines whether to show or hide the pagination for results Default: show","title":"pagination"},{"location":"shortcode/#autocomplete","text":"","title":"Autocomplete"},{"location":"shortcode/#shortcode_1","text":"[cm_typesense_autocomplete] Description: Add the Autocomplete form wherever you may want to. There are no other options.","title":"Shortcode"}]}