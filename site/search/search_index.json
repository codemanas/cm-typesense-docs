{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Search with Typesense Installation Minimum Requirements PHP 7.4 required or greater MySQL 5.6 or greater is recommended Automatic Installation Go to WordPress Plugins > Add New Search for \"Search with Typesense\" Click Install and then activate Plugin Manual Installation If for some reason automatic installation is not possible, go to https://wordpress.org/plugins/search-with-typesense/ and you will see the download button. Clicking download button will provide you with a zip file of the plugin then. Go to WordPress Plugins > Add New and click upload plugin. Click upload plugin and then add the zip file The plugin will then be installed, then activate the plugin.","title":"Installation"},{"location":"#search-with-typesense","text":"","title":"Search with Typesense"},{"location":"#installation","text":"","title":"Installation"},{"location":"#minimum-requirements","text":"PHP 7.4 required or greater MySQL 5.6 or greater is recommended","title":"Minimum Requirements"},{"location":"#automatic-installation","text":"Go to WordPress Plugins > Add New Search for \"Search with Typesense\" Click Install and then activate Plugin","title":"Automatic Installation"},{"location":"#manual-installation","text":"If for some reason automatic installation is not possible, go to https://wordpress.org/plugins/search-with-typesense/ and you will see the download button. Clicking download button will provide you with a zip file of the plugin then. Go to WordPress Plugins > Add New and click upload plugin. Click upload plugin and then add the zip file The plugin will then be installed, then activate the plugin.","title":"Manual Installation"},{"location":"advanced-custom-post-types/","text":"Adding Custom Post Type Introduction By default, the plugin supports posts and pages for indexing. Adding additional / custom post types can be achieve via filter hooks. There are three things you should be aware of. Adding the custom post type to available post types for indexing Adding schema for your custom post type Formatting data before documents are added For this guide - we have assumed that the custom post type is book, please note that the slug of custom post type is quite important. /** * Register a custom post type called \"book\". * * @see get_post_type_labels() for label keys. */ function wp_docs_codex_book_init() { $labels = array( 'name' => _x( 'Books', 'Post type general name', 'textdomain' ), 'singular_name' => _x( 'Book', 'Post type singular name', 'textdomain' ), 'menu_name' => _x( 'Books', 'Admin Menu text', 'textdomain' ), 'name_admin_bar' => _x( 'Book', 'Add New on Toolbar', 'textdomain' ), 'add_new' => __( 'Add New', 'textdomain' ), 'add_new_item' => __( 'Add New Book', 'textdomain' ), 'new_item' => __( 'New Book', 'textdomain' ), 'edit_item' => __( 'Edit Book', 'textdomain' ), 'view_item' => __( 'View Book', 'textdomain' ), 'all_items' => __( 'All Books', 'textdomain' ), 'search_items' => __( 'Search Books', 'textdomain' ), 'parent_item_colon' => __( 'Parent Books:', 'textdomain' ), 'not_found' => __( 'No books found.', 'textdomain' ), 'not_found_in_trash' => __( 'No books found in Trash.', 'textdomain' ), 'featured_image' => _x( 'Book Cover Image', 'Overrides the \u201cFeatured Image\u201d phrase for this post type. Added in 4.3', 'textdomain' ), 'set_featured_image' => _x( 'Set cover image', 'Overrides the \u201cSet featured image\u201d phrase for this post type. Added in 4.3', 'textdomain' ), 'remove_featured_image' => _x( 'Remove cover image', 'Overrides the \u201cRemove featured image\u201d phrase for this post type. Added in 4.3', 'textdomain' ), 'use_featured_image' => _x( 'Use as cover image', 'Overrides the \u201cUse as featured image\u201d phrase for this post type. Added in 4.3', 'textdomain' ), 'archives' => _x( 'Book archives', 'The post type archive label used in nav menus. Default \u201cPost Archives\u201d. Added in 4.4', 'textdomain' ), 'insert_into_item' => _x( 'Insert into book', 'Overrides the \u201cInsert into post\u201d/\u201dInsert into page\u201d phrase (used when inserting media into a post). Added in 4.4', 'textdomain' ), 'uploaded_to_this_item' => _x( 'Uploaded to this book', 'Overrides the \u201cUploaded to this post\u201d/\u201dUploaded to this page\u201d phrase (used when viewing media attached to a post). Added in 4.4', 'textdomain' ), 'filter_items_list' => _x( 'Filter books list', 'Screen reader text for the filter links heading on the post type listing screen. Default \u201cFilter posts list\u201d/\u201dFilter pages list\u201d. Added in 4.4', 'textdomain' ), 'items_list_navigation' => _x( 'Books list navigation', 'Screen reader text for the pagination heading on the post type listing screen. Default \u201cPosts list navigation\u201d/\u201dPages list navigation\u201d. Added in 4.4', 'textdomain' ), 'items_list' => _x( 'Books list', 'Screen reader text for the items list heading on the post type listing screen. Default \u201cPosts list\u201d/\u201dPages list\u201d. Added in 4.4', 'textdomain' ), ); $args = array( 'labels' => $labels, 'public' => true, 'publicly_queryable' => true, 'show_ui' => true, 'show_in_menu' => true, 'query_var' => true, 'rewrite' => array( 'slug' => 'book' ), 'capability_type' => 'post', 'has_archive' => true, 'hierarchical' => false, 'menu_position' => null, 'supports' => array( 'title', 'editor', 'author', 'thumbnail', 'excerpt', 'comments' ), ); register_post_type( 'book', $args ); } add_action( 'init', 'wp_docs_codex_book_init' ); /** * Create two taxonomies, genres and writers for the post type \"book\". * * @see register_post_type() for registering custom post types. */ function wp_docs_create_book_taxonomies() { // Add new taxonomy, make it hierarchical (like categories) $labels = array( 'name' => _x( 'Genres', 'taxonomy general name', 'textdomain' ), 'singular_name' => _x( 'Genre', 'taxonomy singular name', 'textdomain' ), 'search_items' => __( 'Search Genres', 'textdomain' ), 'all_items' => __( 'All Genres', 'textdomain' ), 'parent_item' => __( 'Parent Genre', 'textdomain' ), 'parent_item_colon' => __( 'Parent Genre:', 'textdomain' ), 'edit_item' => __( 'Edit Genre', 'textdomain' ), 'update_item' => __( 'Update Genre', 'textdomain' ), 'add_new_item' => __( 'Add New Genre', 'textdomain' ), 'new_item_name' => __( 'New Genre Name', 'textdomain' ), 'menu_name' => __( 'Genre', 'textdomain' ), ); $args = array( 'hierarchical' => true, 'labels' => $labels, 'show_ui' => true, 'show_admin_column' => true, 'query_var' => true, 'rewrite' => array( 'slug' => 'genre' ), ); register_taxonomy( 'genre', array( 'book' ), $args ); unset( $args ); unset( $labels ); // Add new taxonomy, NOT hierarchical (like tags) $labels = array( 'name' => _x( 'Writers', 'taxonomy general name', 'textdomain' ), 'singular_name' => _x( 'Writer', 'taxonomy singular name', 'textdomain' ), 'search_items' => __( 'Search Writers', 'textdomain' ), 'popular_items' => __( 'Popular Writers', 'textdomain' ), 'all_items' => __( 'All Writers', 'textdomain' ), 'parent_item' => null, 'parent_item_colon' => null, 'edit_item' => __( 'Edit Writer', 'textdomain' ), 'update_item' => __( 'Update Writer', 'textdomain' ), 'add_new_item' => __( 'Add New Writer', 'textdomain' ), 'new_item_name' => __( 'New Writer Name', 'textdomain' ), 'separate_items_with_commas' => __( 'Separate writers with commas', 'textdomain' ), 'add_or_remove_items' => __( 'Add or remove writers', 'textdomain' ), 'choose_from_most_used' => __( 'Choose from the most used writers', 'textdomain' ), 'not_found' => __( 'No writers found.', 'textdomain' ), 'menu_name' => __( 'Writers', 'textdomain' ), ); $args = array( 'hierarchical' => false, 'labels' => $labels, 'show_ui' => true, 'show_admin_column' => true, 'update_count_callback' => '_update_post_term_count', 'query_var' => true, 'rewrite' => array( 'slug' => 'writer' ), ); register_taxonomy( 'writer', 'book', $args ); } // hook into the init action and call create_book_taxonomies when it fires add_action( 'init', 'wp_docs_create_book_taxonomies', 0 ); Adding Custom Post Type The hook in question to use is : cm_typesense_available_post_types /*** Adds the post type book under available post_types ***/ function cm_typesense_add_available_post_types( $available_post_types ) { $available_post_types['book'] = [ 'label' => 'Book', 'value' => 'book' ]; return $available_post_types; } add_filter( 'cm_typesense_available_post_types', 'cm_typesense_add_available_post_types'); This will add your custom post type to the available post types dropdown in the backend. Which will allow you to enable the post type and index it. IMPORTANT NOTE: Please note the index and value MUST be the post_slug Result: Adding Schema Your schema for the custom post type would most likely need to be different for your custom post type. For example you may want to send custom taxonomies as facets for your post type. To do so you will need to modify / add your schema - BEFORE - any indexing is done IMPORTANT NOTE: SCHEMA NEEDS TO BE DEFINED BEFORE COLLECTION IS CREATED. //only necessary if the default post schema is not necessary function cm_typesense_add_book_schema( $schema, $name ) { if ( $name == 'book' ) { $schema = [ 'name' => 'book', 'fields' => [ [ 'name' => 'post_content', 'type' => 'string' ], [ 'name' => 'post_title', 'type' => 'string' ], [ 'name' => 'post_type', 'type' => 'string' ], [ 'name' => 'post_author', 'type' => 'string' ], [ 'name' => 'comment_count', 'type' => 'int64' ], [ 'name' => 'is_sticky', 'type' => 'int32' ], [ 'name' => 'post_excerpt', 'type' => 'string' ], [ 'name' => 'post_date', 'type' => 'string' ], [ 'name' => 'post_id', 'type' => 'string' ], [ 'name' => 'post_modified', 'type' => 'string' ], [ 'name' => 'id', 'type' => 'string' ], [ 'name' => 'permalink', 'type' => 'string' ], [ 'name' => 'post_thumbnail', 'type' => 'string' ], [ 'name' => 'genre', 'type' => 'string[]', 'facet' => true ] ], 'default_sorting_field' => 'comment_count' ]; } return $schema; } add_filter( 'cm_typesense_schema', 'cm_typesense_add_book_schema', 10, 2 ); In the example above - you can see genre is being sent as a facet. \"genre\" is the custom taxonomy attached to the book post type. Formatting Data //you can modify the code as needed //if your schema is simillar to the default post type then you should only change what fields you need to add //example here we are only adding genre function cm_typesense_format_book_data ( $formatted_data, $raw_data, $object_id, $schema_name ) { if ( $schema_name == 'book' ) { $terms = get_the_terms( $object_id, 'genre' ); $genres = []; foreach ( $terms as $term ) { $genres[] = $term->name; } $formatted_data['genre'] = $genres; } return $formatted_data; } add_filter( 'cm_typesense_data_before_entry', 'cm_typesense_format_book_data', 10, 4 );","title":"Adding Custom Post Types"},{"location":"advanced-custom-post-types/#adding-custom-post-type","text":"","title":"Adding Custom Post Type"},{"location":"advanced-custom-post-types/#introduction","text":"By default, the plugin supports posts and pages for indexing. Adding additional / custom post types can be achieve via filter hooks. There are three things you should be aware of. Adding the custom post type to available post types for indexing Adding schema for your custom post type Formatting data before documents are added For this guide - we have assumed that the custom post type is book, please note that the slug of custom post type is quite important. /** * Register a custom post type called \"book\". * * @see get_post_type_labels() for label keys. */ function wp_docs_codex_book_init() { $labels = array( 'name' => _x( 'Books', 'Post type general name', 'textdomain' ), 'singular_name' => _x( 'Book', 'Post type singular name', 'textdomain' ), 'menu_name' => _x( 'Books', 'Admin Menu text', 'textdomain' ), 'name_admin_bar' => _x( 'Book', 'Add New on Toolbar', 'textdomain' ), 'add_new' => __( 'Add New', 'textdomain' ), 'add_new_item' => __( 'Add New Book', 'textdomain' ), 'new_item' => __( 'New Book', 'textdomain' ), 'edit_item' => __( 'Edit Book', 'textdomain' ), 'view_item' => __( 'View Book', 'textdomain' ), 'all_items' => __( 'All Books', 'textdomain' ), 'search_items' => __( 'Search Books', 'textdomain' ), 'parent_item_colon' => __( 'Parent Books:', 'textdomain' ), 'not_found' => __( 'No books found.', 'textdomain' ), 'not_found_in_trash' => __( 'No books found in Trash.', 'textdomain' ), 'featured_image' => _x( 'Book Cover Image', 'Overrides the \u201cFeatured Image\u201d phrase for this post type. Added in 4.3', 'textdomain' ), 'set_featured_image' => _x( 'Set cover image', 'Overrides the \u201cSet featured image\u201d phrase for this post type. Added in 4.3', 'textdomain' ), 'remove_featured_image' => _x( 'Remove cover image', 'Overrides the \u201cRemove featured image\u201d phrase for this post type. Added in 4.3', 'textdomain' ), 'use_featured_image' => _x( 'Use as cover image', 'Overrides the \u201cUse as featured image\u201d phrase for this post type. Added in 4.3', 'textdomain' ), 'archives' => _x( 'Book archives', 'The post type archive label used in nav menus. Default \u201cPost Archives\u201d. Added in 4.4', 'textdomain' ), 'insert_into_item' => _x( 'Insert into book', 'Overrides the \u201cInsert into post\u201d/\u201dInsert into page\u201d phrase (used when inserting media into a post). Added in 4.4', 'textdomain' ), 'uploaded_to_this_item' => _x( 'Uploaded to this book', 'Overrides the \u201cUploaded to this post\u201d/\u201dUploaded to this page\u201d phrase (used when viewing media attached to a post). Added in 4.4', 'textdomain' ), 'filter_items_list' => _x( 'Filter books list', 'Screen reader text for the filter links heading on the post type listing screen. Default \u201cFilter posts list\u201d/\u201dFilter pages list\u201d. Added in 4.4', 'textdomain' ), 'items_list_navigation' => _x( 'Books list navigation', 'Screen reader text for the pagination heading on the post type listing screen. Default \u201cPosts list navigation\u201d/\u201dPages list navigation\u201d. Added in 4.4', 'textdomain' ), 'items_list' => _x( 'Books list', 'Screen reader text for the items list heading on the post type listing screen. Default \u201cPosts list\u201d/\u201dPages list\u201d. Added in 4.4', 'textdomain' ), ); $args = array( 'labels' => $labels, 'public' => true, 'publicly_queryable' => true, 'show_ui' => true, 'show_in_menu' => true, 'query_var' => true, 'rewrite' => array( 'slug' => 'book' ), 'capability_type' => 'post', 'has_archive' => true, 'hierarchical' => false, 'menu_position' => null, 'supports' => array( 'title', 'editor', 'author', 'thumbnail', 'excerpt', 'comments' ), ); register_post_type( 'book', $args ); } add_action( 'init', 'wp_docs_codex_book_init' ); /** * Create two taxonomies, genres and writers for the post type \"book\". * * @see register_post_type() for registering custom post types. */ function wp_docs_create_book_taxonomies() { // Add new taxonomy, make it hierarchical (like categories) $labels = array( 'name' => _x( 'Genres', 'taxonomy general name', 'textdomain' ), 'singular_name' => _x( 'Genre', 'taxonomy singular name', 'textdomain' ), 'search_items' => __( 'Search Genres', 'textdomain' ), 'all_items' => __( 'All Genres', 'textdomain' ), 'parent_item' => __( 'Parent Genre', 'textdomain' ), 'parent_item_colon' => __( 'Parent Genre:', 'textdomain' ), 'edit_item' => __( 'Edit Genre', 'textdomain' ), 'update_item' => __( 'Update Genre', 'textdomain' ), 'add_new_item' => __( 'Add New Genre', 'textdomain' ), 'new_item_name' => __( 'New Genre Name', 'textdomain' ), 'menu_name' => __( 'Genre', 'textdomain' ), ); $args = array( 'hierarchical' => true, 'labels' => $labels, 'show_ui' => true, 'show_admin_column' => true, 'query_var' => true, 'rewrite' => array( 'slug' => 'genre' ), ); register_taxonomy( 'genre', array( 'book' ), $args ); unset( $args ); unset( $labels ); // Add new taxonomy, NOT hierarchical (like tags) $labels = array( 'name' => _x( 'Writers', 'taxonomy general name', 'textdomain' ), 'singular_name' => _x( 'Writer', 'taxonomy singular name', 'textdomain' ), 'search_items' => __( 'Search Writers', 'textdomain' ), 'popular_items' => __( 'Popular Writers', 'textdomain' ), 'all_items' => __( 'All Writers', 'textdomain' ), 'parent_item' => null, 'parent_item_colon' => null, 'edit_item' => __( 'Edit Writer', 'textdomain' ), 'update_item' => __( 'Update Writer', 'textdomain' ), 'add_new_item' => __( 'Add New Writer', 'textdomain' ), 'new_item_name' => __( 'New Writer Name', 'textdomain' ), 'separate_items_with_commas' => __( 'Separate writers with commas', 'textdomain' ), 'add_or_remove_items' => __( 'Add or remove writers', 'textdomain' ), 'choose_from_most_used' => __( 'Choose from the most used writers', 'textdomain' ), 'not_found' => __( 'No writers found.', 'textdomain' ), 'menu_name' => __( 'Writers', 'textdomain' ), ); $args = array( 'hierarchical' => false, 'labels' => $labels, 'show_ui' => true, 'show_admin_column' => true, 'update_count_callback' => '_update_post_term_count', 'query_var' => true, 'rewrite' => array( 'slug' => 'writer' ), ); register_taxonomy( 'writer', 'book', $args ); } // hook into the init action and call create_book_taxonomies when it fires add_action( 'init', 'wp_docs_create_book_taxonomies', 0 );","title":"Introduction"},{"location":"advanced-custom-post-types/#adding-custom-post-type_1","text":"The hook in question to use is : cm_typesense_available_post_types /*** Adds the post type book under available post_types ***/ function cm_typesense_add_available_post_types( $available_post_types ) { $available_post_types['book'] = [ 'label' => 'Book', 'value' => 'book' ]; return $available_post_types; } add_filter( 'cm_typesense_available_post_types', 'cm_typesense_add_available_post_types'); This will add your custom post type to the available post types dropdown in the backend. Which will allow you to enable the post type and index it. IMPORTANT NOTE: Please note the index and value MUST be the post_slug Result:","title":"Adding Custom Post Type"},{"location":"advanced-custom-post-types/#adding-schema","text":"Your schema for the custom post type would most likely need to be different for your custom post type. For example you may want to send custom taxonomies as facets for your post type. To do so you will need to modify / add your schema - BEFORE - any indexing is done IMPORTANT NOTE: SCHEMA NEEDS TO BE DEFINED BEFORE COLLECTION IS CREATED. //only necessary if the default post schema is not necessary function cm_typesense_add_book_schema( $schema, $name ) { if ( $name == 'book' ) { $schema = [ 'name' => 'book', 'fields' => [ [ 'name' => 'post_content', 'type' => 'string' ], [ 'name' => 'post_title', 'type' => 'string' ], [ 'name' => 'post_type', 'type' => 'string' ], [ 'name' => 'post_author', 'type' => 'string' ], [ 'name' => 'comment_count', 'type' => 'int64' ], [ 'name' => 'is_sticky', 'type' => 'int32' ], [ 'name' => 'post_excerpt', 'type' => 'string' ], [ 'name' => 'post_date', 'type' => 'string' ], [ 'name' => 'post_id', 'type' => 'string' ], [ 'name' => 'post_modified', 'type' => 'string' ], [ 'name' => 'id', 'type' => 'string' ], [ 'name' => 'permalink', 'type' => 'string' ], [ 'name' => 'post_thumbnail', 'type' => 'string' ], [ 'name' => 'genre', 'type' => 'string[]', 'facet' => true ] ], 'default_sorting_field' => 'comment_count' ]; } return $schema; } add_filter( 'cm_typesense_schema', 'cm_typesense_add_book_schema', 10, 2 ); In the example above - you can see genre is being sent as a facet. \"genre\" is the custom taxonomy attached to the book post type.","title":"Adding Schema"},{"location":"advanced-custom-post-types/#formatting-data","text":"//you can modify the code as needed //if your schema is simillar to the default post type then you should only change what fields you need to add //example here we are only adding genre function cm_typesense_format_book_data ( $formatted_data, $raw_data, $object_id, $schema_name ) { if ( $schema_name == 'book' ) { $terms = get_the_terms( $object_id, 'genre' ); $genres = []; foreach ( $terms as $term ) { $genres[] = $term->name; } $formatted_data['genre'] = $genres; } return $formatted_data; } add_filter( 'cm_typesense_data_before_entry', 'cm_typesense_format_book_data', 10, 4 );","title":"Formatting Data"},{"location":"customizing-instant-search-widgets/","text":"Customizing Instant Search Widgets Since version 1.1.4 of the plugin two new filters have been added to customize Facets and the sort by widgets Facets : cm_typesense_search_facet_settings Sort BY : cm_typesense_search_sortby_items Facet Customization To customize facets you can use the settings than can be passed to the refinementList, see available values here A short example would be making Facet searchable and limit function cm_typesense_facet_modifications( $facet_settings, $facet ) { if ( $facet == 'category' ) { $facet_settings = [ 'searchable' => true, 'limit' => 1 ]; } return $facet_settings; } add_filter( 'cm_typesense_search_facet_settings', 'cm_typesense_facet_modifications', 10, 2 ); Here I'm checking that the facet is \"category\" and if it is I am modifying it to make the filter searchable and limit it to 1 result at time. End Result Sort By Customization You can only add items to sort by, to allow sorting by various fields. A word of caution this is dependent on your schema so please make sure you are only adding sortable fields here. You should see what are sortable fields in Typesense documentation here Example to add sort by comment count the following code will work. function cm_typesense_sortby_items( $items, $post_type ) { if ( $post_type == 'post' ) { $items[] = [ 'label' => 'Highest Comment Count', 'value' => $post_type . '/sort/comment_count:desc' ]; } return $items; } add_filter( 'cm_typesense_search_sortby_items', 'cm_typesense_sortby_items', 10, 2 ); End Result","title":"Customizing Widgets"},{"location":"customizing-instant-search-widgets/#customizing-instant-search-widgets","text":"Since version 1.1.4 of the plugin two new filters have been added to customize Facets and the sort by widgets Facets : cm_typesense_search_facet_settings Sort BY : cm_typesense_search_sortby_items","title":"Customizing Instant Search Widgets"},{"location":"customizing-instant-search-widgets/#facet-customization","text":"To customize facets you can use the settings than can be passed to the refinementList, see available values here A short example would be making Facet searchable and limit function cm_typesense_facet_modifications( $facet_settings, $facet ) { if ( $facet == 'category' ) { $facet_settings = [ 'searchable' => true, 'limit' => 1 ]; } return $facet_settings; } add_filter( 'cm_typesense_search_facet_settings', 'cm_typesense_facet_modifications', 10, 2 ); Here I'm checking that the facet is \"category\" and if it is I am modifying it to make the filter searchable and limit it to 1 result at time. End Result","title":"Facet Customization"},{"location":"customizing-instant-search-widgets/#sort-by-customization","text":"You can only add items to sort by, to allow sorting by various fields. A word of caution this is dependent on your schema so please make sure you are only adding sortable fields here. You should see what are sortable fields in Typesense documentation here Example to add sort by comment count the following code will work. function cm_typesense_sortby_items( $items, $post_type ) { if ( $post_type == 'post' ) { $items[] = [ 'label' => 'Highest Comment Count', 'value' => $post_type . '/sort/comment_count:desc' ]; } return $items; } add_filter( 'cm_typesense_search_sortby_items', 'cm_typesense_sortby_items', 10, 2 ); End Result","title":"Sort By Customization"},{"location":"debug/","text":"Debugging There are two types of logs: - Error Log - Debug Log By default, Error Logs are enabled - you can disable them if you want. To do so go to WordPress Dashboard > Typesense > Settings Dates for logs are all in UTC time for uniformity Error Logs: Error logs are logged if there is an error when a request is made to the Typesense node Some of the examples 1) Connection to Node cannot be established 2) There was an error when inserting the document to the collection 3) Error creating collection etc. Debug Log: Debug log - logs every successful request made to Typesense. You can see the details of what is being sent to the node Another use for debug log would be when bulk indexing documents - if for some reason an error log is not generated and documents aren't being added to collection. You should turn on debug log - and view the log files - this is helpful to see when 1) For some reason a single post is not indexed - while bulk indexing 2) Bulk indexing does not index all posts / post_types.","title":"Debugging"},{"location":"debug/#debugging","text":"There are two types of logs: - Error Log - Debug Log By default, Error Logs are enabled - you can disable them if you want. To do so go to WordPress Dashboard > Typesense > Settings Dates for logs are all in UTC time for uniformity","title":"Debugging"},{"location":"debug/#error-logs","text":"Error logs are logged if there is an error when a request is made to the Typesense node Some of the examples 1) Connection to Node cannot be established 2) There was an error when inserting the document to the collection 3) Error creating collection etc.","title":"Error Logs:"},{"location":"debug/#debug-log","text":"Debug log - logs every successful request made to Typesense. You can see the details of what is being sent to the node Another use for debug log would be when bulk indexing documents - if for some reason an error log is not generated and documents aren't being added to collection. You should turn on debug log - and view the log files - this is helpful to see when 1) For some reason a single post is not indexed - while bulk indexing 2) Bulk indexing does not index all posts / post_types.","title":"Debug Log:"},{"location":"getting-started/","text":"Getting Started Generate API Keys Before you do anything else, you must first add the API keys and configure the node. If you are hosting Typesense locally / on your own server. Then please see the steps here to generate API Keys https://typesense.org/docs/0.22.1/api/api-keys.html Otherwise, if you have gone with Typesense cloud option - then once the cluster is set up. There will be an option to generate your API keys. Above Shows overview of API Keys Clicking \"Generate API Keys\" - will generate and download API Keys to be used. Keep this file safe and secure for future use. The Text file will have the following information Protocol: [https] Port: [443] Admin API Key Search Only API Key Node Configuring Plugin Saving Settings After retrieving the required info go to WordPress > Admin Area > Typesense > Settings You will be guided to a page like so. Here - enter the details provided in the text file and click save. Your WordPress install will now be able to connect to your typensese instance. Setup Autocomplete and Indexing The next step is to enable and start indexing your posts. Going to Admin Area > Typesense Here you can Enable which post types should be indexed Bulk index the selected post types Hijack WordPress Search to show autocomplete Enable Post Types This option allows you to select which post types to index. By default the plugin allows you to index posts and pages. Pro version of the plugin will be needed to index custom post types. Bulk Index Bulk Index option allows you to index all posts(post types) at once. Indexing means they will add the document into Typesense instant to be easily retrieved. Hijack WordPress Search When this option is enabled it will replace all search forms that use default WordPress search with autocomplete. Developer Note: It will replace all calls for get_search_form() and the default WordPress search widget or \"core/search\" block used","title":"Getting Started"},{"location":"getting-started/#getting-started","text":"","title":"Getting Started"},{"location":"getting-started/#generate-api-keys","text":"Before you do anything else, you must first add the API keys and configure the node. If you are hosting Typesense locally / on your own server. Then please see the steps here to generate API Keys https://typesense.org/docs/0.22.1/api/api-keys.html Otherwise, if you have gone with Typesense cloud option - then once the cluster is set up. There will be an option to generate your API keys. Above Shows overview of API Keys Clicking \"Generate API Keys\" - will generate and download API Keys to be used. Keep this file safe and secure for future use. The Text file will have the following information Protocol: [https] Port: [443] Admin API Key Search Only API Key Node","title":"Generate API Keys"},{"location":"getting-started/#configuring-plugin","text":"","title":"Configuring Plugin"},{"location":"getting-started/#saving-settings","text":"After retrieving the required info go to WordPress > Admin Area > Typesense > Settings You will be guided to a page like so. Here - enter the details provided in the text file and click save. Your WordPress install will now be able to connect to your typensese instance.","title":"Saving Settings"},{"location":"getting-started/#setup-autocomplete-and-indexing","text":"The next step is to enable and start indexing your posts. Going to Admin Area > Typesense Here you can Enable which post types should be indexed Bulk index the selected post types Hijack WordPress Search to show autocomplete","title":"Setup Autocomplete and Indexing"},{"location":"getting-started/#enable-post-types","text":"This option allows you to select which post types to index. By default the plugin allows you to index posts and pages. Pro version of the plugin will be needed to index custom post types.","title":"Enable Post Types"},{"location":"getting-started/#bulk-index","text":"Bulk Index option allows you to index all posts(post types) at once. Indexing means they will add the document into Typesense instant to be easily retrieved.","title":"Bulk Index"},{"location":"getting-started/#hijack-wordpress-search","text":"When this option is enabled it will replace all search forms that use default WordPress search with autocomplete. Developer Note: It will replace all calls for get_search_form() and the default WordPress search widget or \"core/search\" block used","title":"Hijack WordPress Search"},{"location":"shortcode/","text":"Shortcodes Instant Search Shortcode [cm_typesense_search post_types=\"book,post\" columns=\"3\" filter=\"show\" per_page=\"3\" sortby=\"off\" placeholder=\"Search for...\"] Options: placeholder Values: Any String Description: Determines the placeholder for search field Default: \"Search for\" columns Values: 1 to 5 Description: Determines how may results to show per row Default: 3 post_types Values: Post Slugs e.g. post,page,book Description: accepts enabled post_type slugs to show in instant search, accepts multiple slugs in comma separated form post,page,slug If multiple sources are enabled - filtering is disabled. Default: All enabled post_types filter Values: show or hide Description: accepts \"show\" or \"hide\" - determines if facet/category filtering should be shown. Default: hide per_page Description: Determines no of possible/matched results to show per_page Default: 3 sortby Values: show or hide Description: Determines whether to provide a sorting option - by default sorting option is according to post published Default: show pagination Values: show or hide Description: Determines whether to show or hide the pagination for results Default: show query_by Values: string (Advanced Usage the typesense documentation ) Description: Query results by these fields Default: post_title,post_content sticky_first Values: yes or no Description: Show sticky posts first ? Default: no Autocomplete Shortcode [cm_typesense_autocomplete placeholder=\"Search for...\"\"] Description: Add the Autocomplete form wherever you may want to. There are no other options. Options: placeholder Values: Any String Description: Determines the placeholder for search field Default: \"Search for\"","title":"Shortcode"},{"location":"shortcode/#shortcodes","text":"","title":"Shortcodes"},{"location":"shortcode/#instant-search","text":"","title":"Instant Search"},{"location":"shortcode/#shortcode","text":"[cm_typesense_search post_types=\"book,post\" columns=\"3\" filter=\"show\" per_page=\"3\" sortby=\"off\" placeholder=\"Search for...\"]","title":"Shortcode"},{"location":"shortcode/#options","text":"","title":"Options:"},{"location":"shortcode/#placeholder","text":"Values: Any String Description: Determines the placeholder for search field Default: \"Search for\"","title":"placeholder"},{"location":"shortcode/#columns","text":"Values: 1 to 5 Description: Determines how may results to show per row Default: 3","title":"columns"},{"location":"shortcode/#post_types","text":"Values: Post Slugs e.g. post,page,book Description: accepts enabled post_type slugs to show in instant search, accepts multiple slugs in comma separated form post,page,slug If multiple sources are enabled - filtering is disabled. Default: All enabled post_types","title":"post_types"},{"location":"shortcode/#filter","text":"Values: show or hide Description: accepts \"show\" or \"hide\" - determines if facet/category filtering should be shown. Default: hide","title":"filter"},{"location":"shortcode/#per_page","text":"Description: Determines no of possible/matched results to show per_page Default: 3","title":"per_page"},{"location":"shortcode/#sortby","text":"Values: show or hide Description: Determines whether to provide a sorting option - by default sorting option is according to post published Default: show","title":"sortby"},{"location":"shortcode/#pagination","text":"Values: show or hide Description: Determines whether to show or hide the pagination for results Default: show","title":"pagination"},{"location":"shortcode/#query_by","text":"Values: string (Advanced Usage the typesense documentation ) Description: Query results by these fields Default: post_title,post_content","title":"query_by"},{"location":"shortcode/#sticky_first","text":"Values: yes or no Description: Show sticky posts first ? Default: no","title":"sticky_first"},{"location":"shortcode/#autocomplete","text":"","title":"Autocomplete"},{"location":"shortcode/#shortcode_1","text":"[cm_typesense_autocomplete placeholder=\"Search for...\"\"] Description: Add the Autocomplete form wherever you may want to. There are no other options.","title":"Shortcode"},{"location":"shortcode/#options_1","text":"","title":"Options:"},{"location":"shortcode/#placeholder_1","text":"Values: Any String Description: Determines the placeholder for search field Default: \"Search for\"","title":"placeholder"},{"location":"template-overriding/","text":"Overriding the template allows you to change things of the output for your autocomplete or instant search design as you need to. Plugin base folder: search-with-typesense/templates The templates are in the plugin search-with-typesense/templates and you can override it by copying it to your child theme. To override, copy files from wp-content/plugins/search-with-typesense/templates/ folder to wp-content/themes/your-theme/search-with-typesense/ , Then you can make the changes as you need. For example if you want the filters to show up on the right instead of the left. Copy the file instant-search.php from wp-content/plugins/search-with-typesense/templates/ to wp-content/themes/your-theme/search-with-typesense/instant-search.php . And change the div structure so that main-panel is first and filter-panel is second. End Result: Below is sample of code - please change the template by copying from parent <div class=\"main-panel\"> <div class=\"cm-typesense-search-results-wrapper\"> <div class=\"cm-typesense-search-posts-pages-results-wrapper\"> <?php foreach ( $args['post_types'] as $post_type ) {// echo '<pre>'; var_dump( $config ); echo '</pre>'; ?> <div class=\"cm-typesense-shortcode-search-heading\"> <h2 class=\"cm-typesense-shortcode-search-title\"> <?php $title = ( isset( $config['config']['post_type'][ $post_type ]['label'] ) && $config['config']['post_type'][ $post_type ]['label'] != '' ) ? $config['config']['post_type'][ $post_type ]['label'] : $config['available_post_types'][ $post_type ]['label']; echo esc_html( $title ); ?> </h2> <div class=\"cm-typesense-shortcode-search-<?php echo esc_html( $post_type ); ?>-sortby cm-typesense-sortby\"></div> </div> <div class=\"cm-typesense-shortcode-search-<?php echo esc_html( $post_type ) ?>-result\"></div> <div class=\"cm-typesense-pagination cm-typesense-shortcode-search-<?php echo esc_html( $post_type ); ?>-pagination\"></div> <?php } ?> </div> </div> </div> <?php if ( $args['filter'] === 'show' && 1 === count( $args['post_types'] ) ) { ?> <div class=\"filter-panel\"> <?php foreach ( $facet as $filters ) { foreach ( $filters as $filter ) { ?> <div class=\"cm-typesense-shortcode-search-<?php echo esc_html( $filter ); ?>-filters\" data-title =\"<?php esc_html_e( sprintf( 'Filter by %s', ucwords( esc_html( $filter ) ) ), 'search-with-typesense' ); ?>\" ></div> <?php } } ?> </div> <?php } ?>","title":"Overriding Template"},{"location":"tsfwc/","text":"Introduction Typsense Search for WooCommerce is a premimum addon that provides robust, fast search functionality for WooCommerce products on your website. Features Lightning-fast products search results in miliseconds Allow to override WooCommerce product search Allow to hijack WooCommerce shop and archive pages Provides result in WooCommerce default HTML structure Provides all the features for search and filter provided by WooCommerce but in a better and fast way Provides shortcodes for adding search in only specific locations. Hooks and filters for customizations Template Override for design customizations. Minimum Requirements PHP 7.4 required or greater MySQL 5.6 or greater is recommended Search with Typsense WooCommerce Installation After purchasing from Codemanas , download the zip file Then on your site's dashboard, go to WordPress Plugins > Add New > Search for \"Search with Typesense\" Click Install and then activate Plugin Getting started Activate License After activating the plugin, go to Typesense->Addons , then activate the license. Indexing products First you need to index i.e. push data to Typsense cloud. To do so, follow the below steps: Go to Typsense->Typesense Select the Products post type from the dropdown in Select Posts Types to Enable Then you can set the Products' label and max suggetion to be listed on autocomplete. After that, click the Index button to index. It may take few minutes depending upon the number of products you have. When the indexing is complete, you will get the success message and process is complete. Settings The plugin provides the following default settings at Typesense->WooCommerce : Hijack Shop page - Hijack shop page listing by the instant search Filters Enable category - Enable category filtering Enable price - Enable price filtering Enable rating - Enable filtering by rating Enable attributes - Enable filter by attributes Enable sortby - Enable sortby Pagination - Enable pagination Show featured products first - Display featured products first while filtering or searching products Search placeholder - Change placeholder text on the shop's search Hijack Product Search - Hijack WooCommerce search widget and block with Autocomplete. Note: Same settings are provided in Dashboard->Customize then WooCommerce->Typesense Settings for previewing the live changes. Shortcodes [cm_tsfwc_search cat_filter='show' price_filter='show' rating_filter='show' attribute_filter='show' pagination='show' sortby='show' placeholder='Search products...' show_featured_first='no'] Options: cat_filter Value: show or hide Description: Determines the showing or hiding of the category filter Default value: \"show\" price_filter Value: show or hide Description: Determines the showing or hiding of the price filter Default value: \"show\" rating_filter Value: show or hide Description: Determines the showing or hiding of the rating filter Default value: \"show\" attribute_filter Value: show or hide Description: Determines the showing or hiding of the attribute filter Default value: \"show\" pagination Value: show or hide Description: Determines the showing or hiding of pagination Default value: \"show\" sortby Value: show or hide Description: Determines the showing or hiding of the sortby filter Default value: \"show\" placeholder Value: Any string Description: Placeholder text for the search input field Default value: \"Search products\" show_featured_first Value: yes or no Description: Show the featured products first on the listing while searching or filtering Default value: \"no\" Template Overwriting Overriding the template allows you to change the output for the product listing design as you need to. The templates are in the plugin typesense-search-for-woocommerce/templates and you can override it by copying it to your theme. To override, copy files from wp-content/plugins/typesense-search-for-woocommerce/templates/ folder to wp-content/themes/your-theme/search-with-typesense/woocommerce . Then you can make the changes as you need. For example: if you want the filters to show up on the right instead of the left. Copy the file instant-search.php from typesense-search-for-woocommerce/templates/instant-search.php to your-theme/search-with-typesense/woocommerce/instant-search.php . And change the div structure so that filter-panel is after main-panel . End result: Action Hooks & Filter Hooks / Extending Plugin There are plenty of Hooks and Filters provided by the plugin to allow developers to customize or add additional functionality to the plugin Filter Hooks: Please see https://developer.wordpress.org/plugins/hooks/filters/ for details of what filters are in WordPress. cm_tsfwc_per_page_config Description: Change the per page listing and values Arguments: $per_page_config Array of configs with label and value Default value: [ [ 'label' => 'Per page', 'value' => $atts['per_page'], 'default' => true ], [ 'label' => '10 per page', 'value' => 10 ], [ 'label' => '20 per page', 'value' => 20 ], [ 'label' => '30 per page', 'value' => 30 ], [ 'label' => '40 per page', 'value' => 40 ], [ 'label' => '50 per page', 'value' => 50 ], ] cm_tsfwc_product_fields Description: Add new fields to schema to be indexed. Arguments: $product_fields Array of fields to be indexed. cm_tsfwc_data_before_entry Description: Add the formatted data to the added fields. Arguments: $formatted_data Array of data to be returned. $raw_data Raw data containing product object $object_id Object ID passed $schema_name Name of the schema which is product in this case. Action Hooks: Please see https://developer.wordpress.org/plugins/hooks/actions/ for details of what action hooks are in WordPress. cm_tsfwc_custom_attributes Description: Hook to add custom attributes HTML to the structure Location: templates/instant-search.php Change per page dropdown values on frontend Use Case: What if you want to change the 10 per page, 20 per page and so on value to your own custom, let's say 50 per page, 100 per page and so on. How to do it: The plugin provides a filter: cm_tsfwc_per_page_config to change it. You can use it like below: add_filter( 'cm_tsfwc_per_page_config', 'your_slug_change_per_page' ); function your_slug_change_per_page( $per_page_config ) { $per_page_config = [ [ 'label' => '50 per page', 'value' => 50, 'default' => true ], // one value should always have 'default' => true [ 'label' => '100 per page', 'value' => 100 ], [ 'label' => '150 per page', 'value' => 150 ], [ 'label' => '200 per page', 'value' => 200 ], ]; return $per_page_config; } Adding custom taxonomy as filters Use Case: Suppose you want to add tags ( or any other custom taxonomy ) filter to the shop/archive page other than the default ones provided by the addon. How to do it: Add field to the schema: First you need to add your field to the $product_fields array which is added to the schema using the filter cm_tsfwc_product_fields like this: add_filter( 'cm_tsfwc_product_fields', 'your_slug_add_product_fields' ); function your_slug_add_product_fields( $product_fields ) { $product_fields[] = [ 'name' => 'tags', 'type' => 'string[]', 'facet' => true ]; return $product_fields; } Note: While adding new field to schema only the name should be different. type should be string[] and facet should always be true Update the document data to be indexed After you have added the field, data for the field should be provided using the filter cm_tsfwc_data_before_entry like below: add_filter( 'cm_tsfwc_data_before_entry', 'your_slug_add_data_before_entry', 10, 4 ); function your_slug_add_data_before_entry( $formatted_data, $raw_data, $object_id, $schema_name ) { if( $schema_name === 'product' ) { // only add data if the schema is product $product_tags = get_the_terms( $object_id, 'product_tag' ); $product_tags_arr = []; if( ! is_wp_error( $product_tags ) ) { foreach( $product_tags as $product_tag ) { $product_tags_arr[] = $product_tag->name; } } else { $product_tags_arr = []; // Only array can be pushed to the data. When no data, empty array is the must } $formatted_data['tags'] = $product_tags_arr; } return $formatted_data; } Note: The index for the $formatted_data should be same as name of the field added before. For example: name of the field added before is 'tags' so the index for the $formatted_data is also tags . Important: After changing the schema, collection should be deleted and reindexed to work properly. Displaying the filter To display the filter on the frontend, use the action cm_tsfwc_custom_attributes like below: add_action( 'cm_tsfwc_custom_attributes', 'your_slug_add_custom_attr' ); function your_slug_add_custom_attr() { echo '<div data-facet_name=\"tags\" data-title =\"' . __( \"Filter by Tags\", 'storefront' ) . '\" class=\"cm-tsfwc-shortcode-tags-attribute-filters\"></div>'; } data-facet_name : It should same as the name of the field added before. For example: here name of the field added before is 'tags' so the data-facet_name should be tags data-title : Title for the filter Adding static code / widgets to the sidebar Use Case: Suppose you want to add default WooCommerce widgets like Top Rated Products below the filters How to do it: Use cm_tsfwc_before_filter_panel_end hook add_action( 'cm_tsfwc_add_widgets', 'mytheme_add_widgets' ); function mytheme_add_widgets() { the_widget( 'WC_Widget_Top_Rated_Products' ); } Removing attribute filter Use Case: Suppose you want to remove Filter by size filter. Use cm_tsfwc_attribute_facet_skip hook add_filter( 'cm_tsfwc_attribute_facet_skip', 'mytheme_hide_attribute_facet' ); function mytheme_hide_attribute_facet() { return 'book-author'; }","title":"Typsesense Search for WooCommerce"},{"location":"tsfwc/#introduction","text":"Typsense Search for WooCommerce is a premimum addon that provides robust, fast search functionality for WooCommerce products on your website.","title":"Introduction"},{"location":"tsfwc/#features","text":"Lightning-fast products search results in miliseconds Allow to override WooCommerce product search Allow to hijack WooCommerce shop and archive pages Provides result in WooCommerce default HTML structure Provides all the features for search and filter provided by WooCommerce but in a better and fast way Provides shortcodes for adding search in only specific locations. Hooks and filters for customizations Template Override for design customizations.","title":"Features"},{"location":"tsfwc/#minimum-requirements","text":"PHP 7.4 required or greater MySQL 5.6 or greater is recommended Search with Typsense WooCommerce","title":"Minimum Requirements"},{"location":"tsfwc/#installation","text":"After purchasing from Codemanas , download the zip file Then on your site's dashboard, go to WordPress Plugins > Add New > Search for \"Search with Typesense\" Click Install and then activate Plugin","title":"Installation"},{"location":"tsfwc/#getting-started","text":"","title":"Getting started"},{"location":"tsfwc/#activate-license","text":"After activating the plugin, go to Typesense->Addons , then activate the license.","title":"Activate License"},{"location":"tsfwc/#indexing-products","text":"First you need to index i.e. push data to Typsense cloud. To do so, follow the below steps: Go to Typsense->Typesense Select the Products post type from the dropdown in Select Posts Types to Enable Then you can set the Products' label and max suggetion to be listed on autocomplete. After that, click the Index button to index. It may take few minutes depending upon the number of products you have. When the indexing is complete, you will get the success message and process is complete.","title":"Indexing products"},{"location":"tsfwc/#settings","text":"The plugin provides the following default settings at Typesense->WooCommerce : Hijack Shop page - Hijack shop page listing by the instant search Filters Enable category - Enable category filtering Enable price - Enable price filtering Enable rating - Enable filtering by rating Enable attributes - Enable filter by attributes Enable sortby - Enable sortby Pagination - Enable pagination Show featured products first - Display featured products first while filtering or searching products Search placeholder - Change placeholder text on the shop's search Hijack Product Search - Hijack WooCommerce search widget and block with Autocomplete. Note: Same settings are provided in Dashboard->Customize then WooCommerce->Typesense Settings for previewing the live changes.","title":"Settings"},{"location":"tsfwc/#shortcodes","text":"[cm_tsfwc_search cat_filter='show' price_filter='show' rating_filter='show' attribute_filter='show' pagination='show' sortby='show' placeholder='Search products...' show_featured_first='no']","title":"Shortcodes"},{"location":"tsfwc/#options","text":"cat_filter Value: show or hide Description: Determines the showing or hiding of the category filter Default value: \"show\" price_filter Value: show or hide Description: Determines the showing or hiding of the price filter Default value: \"show\" rating_filter Value: show or hide Description: Determines the showing or hiding of the rating filter Default value: \"show\" attribute_filter Value: show or hide Description: Determines the showing or hiding of the attribute filter Default value: \"show\" pagination Value: show or hide Description: Determines the showing or hiding of pagination Default value: \"show\" sortby Value: show or hide Description: Determines the showing or hiding of the sortby filter Default value: \"show\" placeholder Value: Any string Description: Placeholder text for the search input field Default value: \"Search products\" show_featured_first Value: yes or no Description: Show the featured products first on the listing while searching or filtering Default value: \"no\"","title":"Options:"},{"location":"tsfwc/#template-overwriting","text":"Overriding the template allows you to change the output for the product listing design as you need to. The templates are in the plugin typesense-search-for-woocommerce/templates and you can override it by copying it to your theme. To override, copy files from wp-content/plugins/typesense-search-for-woocommerce/templates/ folder to wp-content/themes/your-theme/search-with-typesense/woocommerce . Then you can make the changes as you need. For example: if you want the filters to show up on the right instead of the left. Copy the file instant-search.php from typesense-search-for-woocommerce/templates/instant-search.php to your-theme/search-with-typesense/woocommerce/instant-search.php . And change the div structure so that filter-panel is after main-panel . End result:","title":"Template Overwriting"},{"location":"tsfwc/#action-hooks-filter-hooks-extending-plugin","text":"There are plenty of Hooks and Filters provided by the plugin to allow developers to customize or add additional functionality to the plugin","title":"Action Hooks &amp; Filter Hooks / Extending Plugin"},{"location":"tsfwc/#filter-hooks","text":"Please see https://developer.wordpress.org/plugins/hooks/filters/ for details of what filters are in WordPress. cm_tsfwc_per_page_config Description: Change the per page listing and values Arguments: $per_page_config Array of configs with label and value Default value: [ [ 'label' => 'Per page', 'value' => $atts['per_page'], 'default' => true ], [ 'label' => '10 per page', 'value' => 10 ], [ 'label' => '20 per page', 'value' => 20 ], [ 'label' => '30 per page', 'value' => 30 ], [ 'label' => '40 per page', 'value' => 40 ], [ 'label' => '50 per page', 'value' => 50 ], ] cm_tsfwc_product_fields Description: Add new fields to schema to be indexed. Arguments: $product_fields Array of fields to be indexed. cm_tsfwc_data_before_entry Description: Add the formatted data to the added fields. Arguments: $formatted_data Array of data to be returned. $raw_data Raw data containing product object $object_id Object ID passed $schema_name Name of the schema which is product in this case.","title":"Filter Hooks:"},{"location":"tsfwc/#action-hooks","text":"Please see https://developer.wordpress.org/plugins/hooks/actions/ for details of what action hooks are in WordPress. cm_tsfwc_custom_attributes Description: Hook to add custom attributes HTML to the structure Location: templates/instant-search.php","title":"Action Hooks:"},{"location":"tsfwc/#change-per-page-dropdown-values-on-frontend","text":"","title":"Change per page dropdown values on frontend"},{"location":"tsfwc/#use-case","text":"What if you want to change the 10 per page, 20 per page and so on value to your own custom, let's say 50 per page, 100 per page and so on.","title":"Use Case:"},{"location":"tsfwc/#how-to-do-it","text":"The plugin provides a filter: cm_tsfwc_per_page_config to change it. You can use it like below: add_filter( 'cm_tsfwc_per_page_config', 'your_slug_change_per_page' ); function your_slug_change_per_page( $per_page_config ) { $per_page_config = [ [ 'label' => '50 per page', 'value' => 50, 'default' => true ], // one value should always have 'default' => true [ 'label' => '100 per page', 'value' => 100 ], [ 'label' => '150 per page', 'value' => 150 ], [ 'label' => '200 per page', 'value' => 200 ], ]; return $per_page_config; }","title":"How to do it:"},{"location":"tsfwc/#adding-custom-taxonomy-as-filters","text":"","title":"Adding custom taxonomy as filters"},{"location":"tsfwc/#use-case_1","text":"Suppose you want to add tags ( or any other custom taxonomy ) filter to the shop/archive page other than the default ones provided by the addon.","title":"Use Case:"},{"location":"tsfwc/#how-to-do-it_1","text":"","title":"How to do it:"},{"location":"tsfwc/#add-field-to-the-schema","text":"First you need to add your field to the $product_fields array which is added to the schema using the filter cm_tsfwc_product_fields like this: add_filter( 'cm_tsfwc_product_fields', 'your_slug_add_product_fields' ); function your_slug_add_product_fields( $product_fields ) { $product_fields[] = [ 'name' => 'tags', 'type' => 'string[]', 'facet' => true ]; return $product_fields; } Note: While adding new field to schema only the name should be different. type should be string[] and facet should always be true","title":"Add field to the schema:"},{"location":"tsfwc/#update-the-document-data-to-be-indexed","text":"After you have added the field, data for the field should be provided using the filter cm_tsfwc_data_before_entry like below: add_filter( 'cm_tsfwc_data_before_entry', 'your_slug_add_data_before_entry', 10, 4 ); function your_slug_add_data_before_entry( $formatted_data, $raw_data, $object_id, $schema_name ) { if( $schema_name === 'product' ) { // only add data if the schema is product $product_tags = get_the_terms( $object_id, 'product_tag' ); $product_tags_arr = []; if( ! is_wp_error( $product_tags ) ) { foreach( $product_tags as $product_tag ) { $product_tags_arr[] = $product_tag->name; } } else { $product_tags_arr = []; // Only array can be pushed to the data. When no data, empty array is the must } $formatted_data['tags'] = $product_tags_arr; } return $formatted_data; } Note: The index for the $formatted_data should be same as name of the field added before. For example: name of the field added before is 'tags' so the index for the $formatted_data is also tags . Important: After changing the schema, collection should be deleted and reindexed to work properly.","title":"Update the document data to be indexed"},{"location":"tsfwc/#displaying-the-filter","text":"To display the filter on the frontend, use the action cm_tsfwc_custom_attributes like below: add_action( 'cm_tsfwc_custom_attributes', 'your_slug_add_custom_attr' ); function your_slug_add_custom_attr() { echo '<div data-facet_name=\"tags\" data-title =\"' . __( \"Filter by Tags\", 'storefront' ) . '\" class=\"cm-tsfwc-shortcode-tags-attribute-filters\"></div>'; } data-facet_name : It should same as the name of the field added before. For example: here name of the field added before is 'tags' so the data-facet_name should be tags data-title : Title for the filter","title":"Displaying the filter"},{"location":"tsfwc/#adding-static-code-widgets-to-the-sidebar","text":"","title":"Adding static code / widgets to the sidebar"},{"location":"tsfwc/#use-case_2","text":"Suppose you want to add default WooCommerce widgets like Top Rated Products below the filters","title":"Use Case:"},{"location":"tsfwc/#how-to-do-it_2","text":"","title":"How to do it:"},{"location":"tsfwc/#use-cm_tsfwc_before_filter_panel_end-hook","text":"add_action( 'cm_tsfwc_add_widgets', 'mytheme_add_widgets' ); function mytheme_add_widgets() { the_widget( 'WC_Widget_Top_Rated_Products' ); }","title":"Use cm_tsfwc_before_filter_panel_end hook"},{"location":"tsfwc/#removing-attribute-filter","text":"","title":"Removing attribute filter"},{"location":"tsfwc/#use-case_3","text":"Suppose you want to remove Filter by size filter.","title":"Use Case:"},{"location":"tsfwc/#use-cm_tsfwc_attribute_facet_skip-hook","text":"add_filter( 'cm_tsfwc_attribute_facet_skip', 'mytheme_hide_attribute_facet' ); function mytheme_hide_attribute_facet() { return 'book-author'; }","title":"Use cm_tsfwc_attribute_facet_skip hook"}]}