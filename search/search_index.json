{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Search with Typesense","text":""},{"location":"#installation","title":"Installation","text":""},{"location":"#minimum-requirements","title":"Minimum Requirements","text":"<ul> <li>PHP 7.4 required or greater</li> <li>MySQL 5.6 or greater is recommended</li> </ul>"},{"location":"#automatic-installation","title":"Automatic Installation","text":"<ol> <li>Go to WordPress Plugins &gt; Add New Search for \"Search with Typesense\"</li> <li>Click Install and then activate Plugin </li> </ol>"},{"location":"#manual-installation","title":"Manual Installation","text":"<p>If for some reason automatic installation is not possible, go to https://wordpress.org/plugins/search-with-typesense/ and you will see the download button.  Clicking download button will provide you with a zip file of the plugin then.</p> <ol> <li>Go to WordPress Plugins &gt; Add New and click upload plugin.</li> <li>Click upload plugin and then add the zip file</li> <li>The plugin will then be installed, then activate the plugin.</li> </ol>"},{"location":"advanced-custom-post-types/","title":"Adding Custom Post Type","text":""},{"location":"advanced-custom-post-types/#introduction","title":"Introduction","text":"<p>By default, the plugin supports posts and pages for indexing. Adding additional / custom post types can be achieve via filter hooks. There are three things you should be aware of.</p> <ol> <li>Adding the custom post type to available post types for indexing</li> <li>Adding schema for your custom post type</li> <li>Formatting data before documents are added</li> </ol> <p>For this guide - we have assumed that the custom post type is book, please note that the <code>slug</code> of custom post type is quite important.</p> <pre><code>/**\n * Register a custom post type called \"book\".\n *\n * @see get_post_type_labels() for label keys.\n */\nfunction wp_docs_codex_book_init() {\n    $labels = array(\n        'name'                  =&gt; _x( 'Books', 'Post type general name', 'textdomain' ),\n        'singular_name'         =&gt; _x( 'Book', 'Post type singular name', 'textdomain' ),\n        'menu_name'             =&gt; _x( 'Books', 'Admin Menu text', 'textdomain' ),\n        'name_admin_bar'        =&gt; _x( 'Book', 'Add New on Toolbar', 'textdomain' ),\n        'add_new'               =&gt; __( 'Add New', 'textdomain' ),\n        'add_new_item'          =&gt; __( 'Add New Book', 'textdomain' ),\n        'new_item'              =&gt; __( 'New Book', 'textdomain' ),\n        'edit_item'             =&gt; __( 'Edit Book', 'textdomain' ),\n        'view_item'             =&gt; __( 'View Book', 'textdomain' ),\n        'all_items'             =&gt; __( 'All Books', 'textdomain' ),\n        'search_items'          =&gt; __( 'Search Books', 'textdomain' ),\n        'parent_item_colon'     =&gt; __( 'Parent Books:', 'textdomain' ),\n        'not_found'             =&gt; __( 'No books found.', 'textdomain' ),\n        'not_found_in_trash'    =&gt; __( 'No books found in Trash.', 'textdomain' ),\n        'featured_image'        =&gt; _x( 'Book Cover Image', 'Overrides the \u201cFeatured Image\u201d phrase for this post type. Added in 4.3', 'textdomain' ),\n        'set_featured_image'    =&gt; _x( 'Set cover image', 'Overrides the \u201cSet featured image\u201d phrase for this post type. Added in 4.3', 'textdomain' ),\n        'remove_featured_image' =&gt; _x( 'Remove cover image', 'Overrides the \u201cRemove featured image\u201d phrase for this post type. Added in 4.3', 'textdomain' ),\n        'use_featured_image'    =&gt; _x( 'Use as cover image', 'Overrides the \u201cUse as featured image\u201d phrase for this post type. Added in 4.3', 'textdomain' ),\n        'archives'              =&gt; _x( 'Book archives', 'The post type archive label used in nav menus. Default \u201cPost Archives\u201d. Added in 4.4', 'textdomain' ),\n        'insert_into_item'      =&gt; _x( 'Insert into book', 'Overrides the \u201cInsert into post\u201d/\u201dInsert into page\u201d phrase (used when inserting media into a post). Added in 4.4', 'textdomain' ),\n        'uploaded_to_this_item' =&gt; _x( 'Uploaded to this book', 'Overrides the \u201cUploaded to this post\u201d/\u201dUploaded to this page\u201d phrase (used when viewing media attached to a post). Added in 4.4', 'textdomain' ),\n        'filter_items_list'     =&gt; _x( 'Filter books list', 'Screen reader text for the filter links heading on the post type listing screen. Default \u201cFilter posts list\u201d/\u201dFilter pages list\u201d. Added in 4.4', 'textdomain' ),\n        'items_list_navigation' =&gt; _x( 'Books list navigation', 'Screen reader text for the pagination heading on the post type listing screen. Default \u201cPosts list navigation\u201d/\u201dPages list navigation\u201d. Added in 4.4', 'textdomain' ),\n        'items_list'            =&gt; _x( 'Books list', 'Screen reader text for the items list heading on the post type listing screen. Default \u201cPosts list\u201d/\u201dPages list\u201d. Added in 4.4', 'textdomain' ),\n    );\n\n    $args = array(\n        'labels'             =&gt; $labels,\n        'public'             =&gt; true,\n        'publicly_queryable' =&gt; true,\n        'show_ui'            =&gt; true,\n        'show_in_menu'       =&gt; true,\n        'query_var'          =&gt; true,\n        'rewrite'            =&gt; array( 'slug' =&gt; 'book' ),\n        'capability_type'    =&gt; 'post',\n        'has_archive'        =&gt; true,\n        'hierarchical'       =&gt; false,\n        'menu_position'      =&gt; null,\n        'supports'           =&gt; array( 'title', 'editor', 'author', 'thumbnail', 'excerpt', 'comments' ),\n    );\n\n    register_post_type( 'book', $args );\n}\n\nadd_action( 'init', 'wp_docs_codex_book_init' );\n/**\n * Create two taxonomies, genres and writers for the post type \"book\".\n *\n * @see register_post_type() for registering custom post types.\n */\nfunction wp_docs_create_book_taxonomies() {\n    // Add new taxonomy, make it hierarchical (like categories)\n    $labels = array(\n        'name'              =&gt; _x( 'Genres', 'taxonomy general name', 'textdomain' ),\n        'singular_name'     =&gt; _x( 'Genre', 'taxonomy singular name', 'textdomain' ),\n        'search_items'      =&gt; __( 'Search Genres', 'textdomain' ),\n        'all_items'         =&gt; __( 'All Genres', 'textdomain' ),\n        'parent_item'       =&gt; __( 'Parent Genre', 'textdomain' ),\n        'parent_item_colon' =&gt; __( 'Parent Genre:', 'textdomain' ),\n        'edit_item'         =&gt; __( 'Edit Genre', 'textdomain' ),\n        'update_item'       =&gt; __( 'Update Genre', 'textdomain' ),\n        'add_new_item'      =&gt; __( 'Add New Genre', 'textdomain' ),\n        'new_item_name'     =&gt; __( 'New Genre Name', 'textdomain' ),\n        'menu_name'         =&gt; __( 'Genre', 'textdomain' ),\n    );\n\n    $args = array(\n        'hierarchical'      =&gt; true,\n        'labels'            =&gt; $labels,\n        'show_ui'           =&gt; true,\n        'show_admin_column' =&gt; true,\n        'query_var'         =&gt; true,\n        'rewrite'           =&gt; array( 'slug' =&gt; 'genre' ),\n    );\n\n    register_taxonomy( 'genre', array( 'book' ), $args );\n\n    unset( $args );\n    unset( $labels );\n\n    // Add new taxonomy, NOT hierarchical (like tags)\n    $labels = array(\n        'name'                       =&gt; _x( 'Writers', 'taxonomy general name', 'textdomain' ),\n        'singular_name'              =&gt; _x( 'Writer', 'taxonomy singular name', 'textdomain' ),\n        'search_items'               =&gt; __( 'Search Writers', 'textdomain' ),\n        'popular_items'              =&gt; __( 'Popular Writers', 'textdomain' ),\n        'all_items'                  =&gt; __( 'All Writers', 'textdomain' ),\n        'parent_item'                =&gt; null,\n        'parent_item_colon'          =&gt; null,\n        'edit_item'                  =&gt; __( 'Edit Writer', 'textdomain' ),\n        'update_item'                =&gt; __( 'Update Writer', 'textdomain' ),\n        'add_new_item'               =&gt; __( 'Add New Writer', 'textdomain' ),\n        'new_item_name'              =&gt; __( 'New Writer Name', 'textdomain' ),\n        'separate_items_with_commas' =&gt; __( 'Separate writers with commas', 'textdomain' ),\n        'add_or_remove_items'        =&gt; __( 'Add or remove writers', 'textdomain' ),\n        'choose_from_most_used'      =&gt; __( 'Choose from the most used writers', 'textdomain' ),\n        'not_found'                  =&gt; __( 'No writers found.', 'textdomain' ),\n        'menu_name'                  =&gt; __( 'Writers', 'textdomain' ),\n    );\n\n    $args = array(\n        'hierarchical'          =&gt; false,\n        'labels'                =&gt; $labels,\n        'show_ui'               =&gt; true,\n        'show_admin_column'     =&gt; true,\n        'update_count_callback' =&gt; '_update_post_term_count',\n        'query_var'             =&gt; true,\n        'rewrite'               =&gt; array( 'slug' =&gt; 'writer' ),\n    );\n\n    register_taxonomy( 'writer', 'book', $args );\n}\n\n// hook into the init action and call create_book_taxonomies when it fires\nadd_action( 'init', 'wp_docs_create_book_taxonomies', 0 );\n</code></pre>"},{"location":"advanced-custom-post-types/#adding-custom-post-type_1","title":"Adding Custom Post Type","text":"<p>To add custom post types, <code>cm_typesense_available_index_types</code> needs to be used like below:</p> <pre><code>function cm_typesense_add_available_post_types( $available_post_types ) {\n    $available_post_types['book'] = [ 'label' =&gt; 'Book', 'value' =&gt; 'book' ];\n\n    return $available_post_types;\n}\nadd_filter( 'cm_typesense_available_index_types',  'cm_typesense_add_available_post_types');\n\n</code></pre> <p>Note: This hook is available since version <code>1.3.0</code>. Before version <code>1.3.0</code>, <code>cm_typesense_available_post_types</code> needs to be used for the purspose.</p> <p>This will add your custom post type to the available post types dropdown in the backend. Which will allow you to enable the post type and index it.</p> <p>IMPORTANT NOTE: Please note the index and value MUST be the post_slug</p> <p>Result: </p>"},{"location":"advanced-custom-post-types/#adding-schema","title":"Adding Schema","text":"<p>Your schema for the custom post type would most likely need to be different for your custom post type. For example you may want to send custom taxonomies as facets for your post type. To do so you will need to modify / add your schema - BEFORE - any indexing is done</p> <p>IMPORTANT NOTE: SCHEMA NEEDS TO BE DEFINED BEFORE COLLECTION IS CREATED.</p> <pre><code>//only necessary if the default post schema is not necessary\nfunction cm_typesense_add_book_schema( $schema, $name ) {\n    if ( $name == 'book' ) {\n        $schema = [\n            'name'                  =&gt; 'book',\n            'fields'                =&gt; [\n                [ 'name' =&gt; 'post_content', 'type' =&gt; 'string' ],\n                [ 'name' =&gt; 'post_title', 'type' =&gt; 'string' ],\n                [ 'name' =&gt; 'post_type', 'type' =&gt; 'string' ],\n                [ 'name' =&gt; 'post_author', 'type' =&gt; 'string' ],\n                [ 'name' =&gt; 'comment_count', 'type' =&gt; 'int64' ],\n                [ 'name' =&gt; 'is_sticky', 'type' =&gt; 'int32' ],\n                [ 'name' =&gt; 'post_excerpt', 'type' =&gt; 'string' ],\n                [ 'name' =&gt; 'post_date', 'type' =&gt; 'string' ],\n                [ 'name' =&gt; 'post_id', 'type' =&gt; 'string' ],\n                [ 'name' =&gt; 'post_modified', 'type' =&gt; 'string' ],\n                [ 'name' =&gt; 'id', 'type' =&gt; 'string' ],\n                [ 'name' =&gt; 'permalink', 'type' =&gt; 'string' ],\n                [ 'name' =&gt; 'post_thumbnail', 'type' =&gt; 'string' ],\n                [ 'name' =&gt; 'genre', 'type' =&gt; 'string[]', 'facet' =&gt; true ]\n            ],\n            'default_sorting_field' =&gt; 'comment_count'\n        ];\n    }\n\n\n    return $schema;\n}\n\nadd_filter( 'cm_typesense_schema', 'cm_typesense_add_book_schema', 10, 2 );\n</code></pre> <p>In the example above - you can see genre is being sent as a facet. \"genre\" is the custom taxonomy attached to the book post type.</p>"},{"location":"advanced-custom-post-types/#formatting-data","title":"Formatting Data","text":"<pre><code>//you can modify the code as needed \n//if your schema is simillar to the default post type then you should only change what fields you need to add\n//example here we are only adding genre\nfunction cm_typesense_format_book_data ( $formatted_data, $raw_data, $object_id, $schema_name ) {\n    if ( $schema_name == 'book' ) {\n        $terms  = get_the_terms( $object_id, 'genre' );\n        $genres = [];\n        foreach ( $terms as $term ) {\n            $genres[] = $term-&gt;name;\n        }\n        $formatted_data['genre'] = $genres;\n    }\n\n    return $formatted_data;\n}\nadd_filter( 'cm_typesense_data_before_entry', 'cm_typesense_format_book_data', 10, 4 );\n</code></pre>"},{"location":"advanced-custom-taxonomy/","title":"Adding Custom Taxonomy as Collection","text":""},{"location":"advanced-custom-taxonomy/#introduction","title":"Introduction","text":"<p>Adding custom or additional taxonomy as a collection. From version 1.3.1 - the plugin adds the default post category as an indexable taxonomy option. To add additional/custom taxonomy - the following steps are required</p> <ol> <li>Add as Available Index Type</li> <li>Add Schema for Custom Taxonomy</li> <li>Format Document Before Entry (optional)</li> </ol> <p>This example assumes that you have a custom post type called book, and a custom taxonomy called genre</p> <pre><code>/**\n * Create genres for the post type \"book\".\n *\n * @see register_post_type() for registering custom post types.\n */\nfunction wp_docs_create_book_taxonomies() {\n    // Add new taxonomy, make it hierarchical (like categories)\n    $labels = array(\n        'name'              =&gt; _x( 'Genres', 'taxonomy general name', 'textdomain' ),\n        'singular_name'     =&gt; _x( 'Genre', 'taxonomy singular name', 'textdomain' ),\n        'search_items'      =&gt; __( 'Search Genres', 'textdomain' ),\n        'all_items'         =&gt; __( 'All Genres', 'textdomain' ),\n        'parent_item'       =&gt; __( 'Parent Genre', 'textdomain' ),\n        'parent_item_colon' =&gt; __( 'Parent Genre:', 'textdomain' ),\n        'edit_item'         =&gt; __( 'Edit Genre', 'textdomain' ),\n        'update_item'       =&gt; __( 'Update Genre', 'textdomain' ),\n        'add_new_item'      =&gt; __( 'Add New Genre', 'textdomain' ),\n        'new_item_name'     =&gt; __( 'New Genre Name', 'textdomain' ),\n        'menu_name'         =&gt; __( 'Genre', 'textdomain' ),\n    );\n\n    $args = array(\n        'hierarchical'      =&gt; true,\n        'labels'            =&gt; $labels,\n        'show_ui'           =&gt; true,\n        'show_admin_column' =&gt; true,\n        'query_var'         =&gt; true,\n        'rewrite'           =&gt; array( 'slug' =&gt; 'genre' ),\n    );\n\n    register_taxonomy( 'genre', array( 'book' ), $args );\n}\n\n// hook into the init action and call create_book_taxonomies when it fires\nadd_action( 'init', 'wp_docs_create_book_taxonomies', 0 );\n</code></pre>"},{"location":"advanced-custom-taxonomy/#add-available-index-type","title":"Add Available Index Type","text":"<p>The following code will add the genre option to be selected and configured via Typesense &gt; Typesense admin area. For a taxonomy it is implicitly required to define \"type =&gt; taxonomy\".</p> <pre><code>/** Add the genre option to available index list **/\n    function cm_typesense_add_taxonomy( $available_post_types ) {\n        $available_post_types['category'] = [ 'label' =&gt; 'Post Categories', 'value' =&gt; 'category', 'type' =&gt; 'taxonomy' ];\n\n        return $available_post_types;\n    }\n    add_filter( 'cm_typesense_available_index_types', 'cm_typesense_add_taxonomy' );\n\n</code></pre> <p>The following code updates taxonomy - any time changes are made to taxonomy</p> <pre><code>    function cm_typesense_add_taxonomy_for_update( $taxonomies ) {\n        $taxonomies[] = 'genre';\n\n        return $taxonomies;\n    }\n\n    add_filter( 'cm_typesense_enabled_taxonomy_for_post_type', 'cm_typesense_add_taxonomy_for_update' );\n</code></pre> <p>*** Make sure the value for genre is the same as slug of the taxonomy. ***</p>"},{"location":"advanced-custom-taxonomy/#add-schema-for-custom-taxonomy","title":"Add Schema for Custom Taxonomy","text":"<p>You can define - your taxonomy schema as any way you want. But to be compatible with the default autocomplete and instant search templates - please use the following base schema.</p> <pre><code>function cm_typesense_add_post_category_schema( $schema, $name ) {\n        if ( $name == 'genre' ) {\n            $schema = [\n                'name'                  =&gt; 'genre',\n                'fields'                =&gt; [\n                    [ 'name' =&gt; 'term_id', 'type' =&gt; 'string' ],\n                    [ 'name' =&gt; 'id', 'type' =&gt; 'string' ],\n                    [ 'name' =&gt; 'taxonomy', 'type' =&gt; 'string' ],\n                    [ 'name' =&gt; 'post_title', 'type' =&gt; 'string' ],\n                    [ 'name' =&gt; 'post_content', 'type' =&gt; 'string' ],\n                    [ 'name' =&gt; 'slug', 'type' =&gt; 'string' ],\n                    [ 'name' =&gt; 'posts_count', 'type' =&gt; 'int64' ],\n                    [ 'name' =&gt; 'permalink', 'type' =&gt; 'string' ],\n                ],\n                'default_sorting_field' =&gt; 'posts_count'\n            ];\n        }\n\n\n        return $schema;\n    }\n\nadd_filter( 'cm_typesense_schema', 'cm_typesense_add_post_category_schema', 10, 2 );\n</code></pre>"},{"location":"advanced-custom-taxonomy/#format-document-before-entry-optional","title":"Format Document Before Entry (optional)","text":"<p>This step is only required if you are adding additional fields or have modified the schema. For example if schema has a thumbnail that you would like to show. Suppose I have added a post thumbnail field via ACF which return image URL. Then the schema would be</p> <pre><code>function cm_typesense_add_post_category_schema( $schema, $name ) {\n        if ( $name == 'genre' ) {\n            $schema = [\n                'name'                  =&gt; 'genre',\n                'fields'                =&gt; [\n                    [ 'name' =&gt; 'term_id', 'type' =&gt; 'string' ],\n                    [ 'name' =&gt; 'id', 'type' =&gt; 'string' ],\n                    [ 'name' =&gt; 'taxonomy', 'type' =&gt; 'string' ],\n                    [ 'name' =&gt; 'post_title', 'type' =&gt; 'string' ],\n                    [ 'name' =&gt; 'post_content', 'type' =&gt; 'string' ],\n                    [ 'name' =&gt; 'slug', 'type' =&gt; 'string' ],\n                    [ 'name' =&gt; 'posts_count', 'type' =&gt; 'int64' ],\n                    [ 'name' =&gt; 'permalink', 'type' =&gt; 'string' ],\n                    ['name'=&gt;'post_thumbnail','type'=&gt;'string']\n                ],\n                'default_sorting_field' =&gt; 'posts_count'\n            ];\n        }\n\n\n        return $schema;\n    }\n\nadd_filter( 'cm_typesense_schema', 'cm_typesense_add_post_category_schema', 10, 2 );\n</code></pre> <p>Then we can add the data the following way</p> <pre><code>    function cm_typesense_format_taxonomy_data_before_entry( $formatted_data, $raw_data, $object_id, $schema_name ) {\n        if ( $schema_name == 'genre' ) {\n            //only need to add the additional data\n            $formatted_data['post_thumbnail'] = get_field( 'image', $raw_data ) ?? CODEMANAS_TYPESENSE_ROOT_URI_PATH . '/assets/placeholder.jpg';\n        }\n\n        return $formatted_data;\n    }\n\n    add_filter( 'cm_typesense_data_before_entry', 'cm_typesense_format_taxonomy_data_before_entry', 10, 4 );\n</code></pre>"},{"location":"changing-widgets/","title":"Changing Default Widgets","text":"<p>By default, all facets for filtering are shown as refinementList. As of version 1.2.4 developers have the version to add between menu, rangeSlider or rangeInput.</p> <p>Note: For rangeSlider and rangeInput the facet must be int64.</p> <p>To do this you can use filer <code>cm_typesense_filter_type</code>. The following code is written in child themes functions.php file.</p> <pre><code>function cm_change_facet_widget_type( $filterType, $filterName ) {\n    if ( $filterName == 'category' ) {\n        $filterType = 'menu';\n    } else if ( $filterName == 'comment_count' ) {\n        /*For range slider the schema for field must be int64*/\n        $filterType = 'rangeSlider';\n    }\n\n    return $filterType;\n}\n\nadd_filter( 'cm_typesense_filter_type', 'cm_change_facet_widget_type', 10, 2 );\n</code></pre>"},{"location":"customizing-default-hit-template/","title":"Customizing default result template","text":""},{"location":"customizing-default-hit-template/#customizing-the-default-results-template-in-instant-search-module","title":"Customizing the default results template in instant-search module","text":""},{"location":"customizing-default-hit-template/#use-case","title":"Use case:","text":"<p>Suppose you added a new field for instance <code>price</code> in your schema and indexed it to TypeSense server. Now how to show the price in the result template?</p> <p>To show the price in result tempalte, follow the steps below:</p>"},{"location":"customizing-default-hit-template/#1-register-a-custom-template-for-your-index-type","title":"1. Register a custom template for your index type","text":"<p>First you have to register the custom template for your index type. The important part here is the <code>id</code> of the template. If you look at the code below, notice the id of the script is <code>tmpl-cmswt-Result-itemTemplate--book</code>. The last part of the <code>id</code> must be value of the index type you are registering with the hook <code>cm_typesense_available_post_types</code>.</p> <pre><code>&lt;?php\nfunction cm_202208_add_book_hit_template() { ?&gt;\n    &lt;script type=\"text/html\" id=\"tmpl-cmswt-Result-itemTemplate--book\"&gt;\n        &lt;div class=\"hit-header\"&gt;\n            &lt;# if(data.post_thumbnail !== undefined) { #&gt;\n            &lt;a href=\"{{{data._highlightResult.permalink.value}}}\" class=\"hit-header--link\" rel=\"nofollow noopener\"&gt;\n                &lt;img src=\"{{{data.post_thumbnail}}}\"/&gt;\n            &lt;/a&gt;\n            &lt;# } #&gt;\n        &lt;/div&gt;\n        &lt;div class=\"hit-content\"&gt;\n            &lt;a href=\"{{{data._highlightResult.permalink.value}}}\" rel=\"nofollow noopener\"&gt;&lt;h5 class=\"title\"&gt;{{{data.formatted.post_title}}}&lt;/h5&gt;&lt;/a&gt;\n            &lt;# if( data.post_type === 'book' ) { #&gt;\n            &lt;div class=\"hit-meta\"&gt;\n                    &lt;span class=\"posted-on\"&gt;\n                        &lt;time datetime=\"\"&gt;{{data.formatted.postedDate}}&lt;/time&gt;\n                    &lt;/span&gt;\n                &lt;# if ( Object.keys(data.formatted.cats).length &gt; 0 ) { #&gt;\n                &lt;div class=\"hit-cats\"&gt;\n                    &lt;# for ( let key in data.formatted.cats ) { #&gt;\n                    &lt;div class=\"hit-cat\"&gt;&lt;a href=\"{{{data.formatted.cats[key]}}}\"&gt;{{{key}}}&lt;/a&gt;,&lt;/div&gt;\n                    &lt;# } #&gt;\n                &lt;/div&gt;\n                &lt;# } #&gt;\n                &lt;# } #&gt;\n                &lt;div class=\"hit-description\"&gt;{{{data.formatted.post_content}}}&lt;/div&gt;\n                &lt;div class=\"hit-link\"&gt;\n                    &lt;a href=\"{{data.permalink}}\"&gt;&lt;?php _e( 'Read More...', 'search-with-typesense' ); ?&gt;&lt;/a&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/script&gt;\n&lt;?php\n}\nadd_action( 'wp_footer', 'cm_202208_add_book_hit_template' );\n</code></pre> <p>Note: The template above is the default template.</p>"},{"location":"customizing-default-hit-template/#2-showing-the-custom-field","title":"2. Showing the custom field","text":"<p>In our case we want to show our custom field <code>price</code>, for that we change the above code by adding this line: <code>&lt;span class=\"price\"&gt;Price: ${{{data.price}}}&lt;/span&gt;</code></p> <pre><code>&lt;?php\nfunction your_prefix_custom_hits() {\n    ?&gt;\n    &lt;script type=\"text/html\" id=\"tmpl-cmswt-Result-itemTemplate--default\"&gt;\n        &lt;div class=\"hit-header\"&gt;\n            &lt;# if(data.post_thumbnail !== undefined) { #&gt;\n            &lt;a href=\"{{{data._highlightResult.permalink.value}}}\" class=\"hit-header--link\" rel=\"nofollow noopener\"&gt;\n                &lt;img src=\"{{{data.post_thumbnail}}}\"/&gt;\n            &lt;/a&gt;\n            &lt;# } #&gt;\n        &lt;/div&gt;\n        &lt;div class=\"hit-content\"&gt;\n            &lt;# if(data._highlightResult.permalink !== undefined ) { #&gt;\n            &lt;a href=\"{{{data._highlightResult.permalink.value}}}\" rel=\"nofollow noopener\"&gt;&lt;h5 class=\"title\"&gt;{{{data.formatted.post_title}}}&lt;/h5&gt;&lt;/a&gt;\n            &lt;# } #&gt;\n            &lt;# if( data.post_type === 'book' ) { #&gt;\n            &lt;div class=\"hit-meta\"&gt;\n                &lt;span class=\"posted-on\"&gt;\n                    &lt;time datetime=\"\"&gt;{{data.formatted.postedDate}}&lt;/time&gt;\n                &lt;/span&gt;\n                &lt;span class=\"price\"&gt;Price: ${{{data.price}}}&lt;/span&gt;\n                &lt;# if ( Object.keys(data.formatted.cats).length &gt; 0 ) { #&gt;\n                &lt;div class=\"hit-cats\"&gt;\n                    &lt;# for ( let key in data.formatted.cats ) { #&gt;\n                    &lt;div class=\"hit-cat\"&gt;&lt;a href=\"{{{data.formatted.cats[key]}}}\"&gt;{{{key}}}&lt;/a&gt;,&lt;/div&gt;\n                    &lt;# } #&gt;\n                &lt;/div&gt;\n                &lt;# } #&gt;\n                &lt;# } #&gt;\n                &lt;div class=\"hit-description\"&gt;{{{data.formatted.post_content}}}&lt;/div&gt;\n                &lt;div class=\"hit-link\"&gt;\n                    &lt;a href=\"{{data.permalink}}\"&gt;&lt;?php _e( 'Read More...', 'search-with-typesense' ); ?&gt;&lt;/a&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n\n    &lt;/script&gt;\n&lt;?php\n}\nadd_action( 'wp_footer', 'your_prefix_custom_hits' );\n</code></pre>"},{"location":"customizing-default-hit-template/#3-debug-what-kind-of-data-are-availabe","title":"3. Debug what kind of data are availabe","text":"<p>To debug or see what values are avialable to use, you can add <code>{{console.log(data)}}</code> inside the template and see the available datas.</p> <p>In our custom example, this will log something like this: </p>"},{"location":"customizing-instant-search-widgets/","title":"Customizing Instant Search Widgets","text":"<p>Since version 1.1.4 of the plugin two new filters have been added to customize Facets and the sort by widgets</p> <ul> <li>Facets  : <code>cm_typesense_search_facet_settings</code> </li> <li>Sort BY : <code>cm_typesense_search_sortby_items</code></li> </ul>"},{"location":"customizing-instant-search-widgets/#facet-customization","title":"Facet Customization","text":"<p>To customize facets you can use the settings than can be passed to the refinementList, see available values here</p> <p>A short example would be making Facet searchable and limit</p> <pre><code>function cm_typesense_facet_modifications( $facet_settings, $facet ) {\n    if ( $facet == 'category' ) {\n        $facet_settings = [\n            'searchable' =&gt; true,\n            'limit'      =&gt; 1\n        ];\n    }\n\n    return $facet_settings;\n}\n\nadd_filter( 'cm_typesense_search_facet_settings', 'cm_typesense_facet_modifications', 10, 2 );\n</code></pre> <p>Here I'm checking that the facet is \"category\" and if it is I am modifying it to make the filter searchable and limit it to 1 result at time.</p> <p> End Result</p>"},{"location":"customizing-instant-search-widgets/#sort-by-customization","title":"Sort By Customization","text":"<p>You can only add items to sort by, to allow sorting by various fields. A word of caution this is dependent on your schema so please make sure you are only adding sortable fields here. You should see what are sortable fields in Typesense documentation here </p> <p>Example to add sort by comment count the following code will work.</p> <pre><code>function cm_typesense_sortby_items( $items, $post_type ) {\n    if ( $post_type == 'post' ) {\n        $items[] = [ 'label' =&gt; 'Highest Comment Count', 'value' =&gt; $post_type . '/sort/comment_count:desc' ];\n    }\n\n    return $items;\n}\n\nadd_filter( 'cm_typesense_search_sortby_items', 'cm_typesense_sortby_items', 10, 2 );\n</code></pre> <p> End Result</p>"},{"location":"debug/","title":"Debugging","text":"<p>There are two types of logs: - Error Log - Debug Log</p> <p>By default, Error Logs are enabled - you can disable them if you want. To do so go to WordPress Dashboard &gt; Typesense &gt; Settings </p> <p></p> <p>Dates for logs are all in UTC time for uniformity</p>"},{"location":"debug/#error-logs","title":"Error Logs:","text":"<p>Error logs are logged if there is an error when a request is made to the Typesense node Some of the examples</p> <ol> <li>Connection to Node cannot be established</li> <li>There was an error when inserting the document to the collection </li> <li>Error creating collection etc.</li> </ol>"},{"location":"debug/#debug-log","title":"Debug Log:","text":"<p>Debug log - logs every successful request made to Typesense. You can see the details of what is being sent to the node Another use for debug log would be when bulk indexing documents - if for some reason an error log is not generated and documents aren't being added to collection. You should turn on debug log - and view the log files - this is helpful to see when  1. For some reason a single post is not indexed - while bulk indexing  2. Bulk indexing does not index all posts / post_types.</p>"},{"location":"debug/#site-info","title":"Site Info:","text":"<p>Site Info - Get info about your WordPress site with the schema info and your Typesense cloud server info</p>"},{"location":"debug/#curl-error-6-could-not-resolve-host","title":"cURL error 6: Could not resolve host","text":"<p>This means your node could not be resolved. </p> <p>To resolve this, verify the following:</p> <ol> <li>Check if your credentials are right from the Typesense cloud keys and node.</li> <li>Your instance in Typesense cloud could have expired. Contact Typesense support for that.</li> </ol>"},{"location":"getting-started/","title":"Getting Started","text":""},{"location":"getting-started/#generate-api-keys","title":"Generate API Keys","text":"<p>Before you do anything else, you must first add the API keys and configure the node.</p> <p>If you are hosting Typesense locally / on your own server. Then please see the steps here to generate API Keys https://typesense.org/docs/0.22.1/api/api-keys.html</p> <p>Otherwise, if you have gone with Typesense cloud option - then once the cluster is set up. There will be an option to generate your API keys.</p> <p> Above Shows overview of API Keys</p> <p>Clicking \"Generate API Keys\" - will generate and download API Keys to be used. Keep this file safe and secure for future use.</p> <p>The Text file will have the following information </p> <ul> <li>Protocol: [https]</li> <li>Port: [443]</li> <li>Admin API Key</li> <li>Search Only API Key</li> <li>Node</li> </ul>"},{"location":"getting-started/#configuring-plugin","title":"Configuring Plugin","text":""},{"location":"getting-started/#saving-settings","title":"Saving Settings","text":"<p>After retrieving the required info go to  WordPress &gt; Admin Area &gt; Typesense &gt; Settings You will be guided to a page like so.</p> <p></p> <p>Here - enter the details provided in the text file and click save. Your WordPress install will now be able to connect to your typensese instance.</p>"},{"location":"getting-started/#setup-autocomplete-and-indexing","title":"Setup Autocomplete and Indexing","text":"<p>The next step is to enable and start indexing your posts.</p> <p>Going to Admin Area &gt; Typesense  </p> <p>Here you can </p> <ol> <li>Enable which post types should be indexed</li> <li>Bulk index the selected post types</li> <li>Replace WordPress Search to show autocomplete or instant search popup</li> </ol>"},{"location":"getting-started/#enable-post-types","title":"Enable Post Types","text":"<p>This option allows you to select which post types to index. By default the plugin allows you to index posts and pages.</p>"},{"location":"getting-started/#bulk-index","title":"Bulk Index","text":"<p>Bulk Index option allows you to index all posts(post types) at once. Indexing means they will add the document into Typesense instant to be easily retrieved.</p>"},{"location":"getting-started/#replace-wordpress-search","title":"Replace WordPress Search","text":"<p>When this option is enabled it will replace all search forms that use default WordPress search with either Instant Search popup or autocomplete. Developer Note: It will replace all calls for get_search_form() and the default WordPress search widget or \"core/search\" block used</p>"},{"location":"getting-started/#instant-search-popup","title":"Instant Search Popup","text":"<p>Instant Search - replaces all instance of default WordPress search - search forms etc with a popup of instant search. You can customize the appearance of the search by going to appearance &gt; customize &gt; Typesense Search</p> <p>To add a custom trigger - you can add the class \"cm-swt-instant-search-popup--trigger\" to your button / svg / anchor tag to trigger the popup Something like the following:</p> <pre><code>&lt;a href=\"#\" class=\"cm-swt-instant-search-popup--trigger cm-swt-instant-search-popup--trigger-default\"&gt;&lt;svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" stroke-width=\"2\"&gt;\n  &lt;path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\" /&gt;\n&lt;/svg&gt;&lt;/a&gt;\n</code></pre>"},{"location":"getting-started/#autocomplete","title":"Autocomplete","text":"<p>Replaces all search forms with Autocomplete. See example here https://typesense.codemanas.com/autocomplete/</p>"},{"location":"shortcode/","title":"Shortcodes","text":""},{"location":"shortcode/#instant-search","title":"Instant Search","text":""},{"location":"shortcode/#shortcode","title":"Shortcode","text":"<pre><code>[cm_typesense_search post_types=\"book,post\" columns=\"3\" filter=\"show\" per_page=\"3\" sortby=\"off\" placeholder=\"Search for...\" selected_filters=\"show\" stats=\"show\" routing=\"enable\"]\n</code></pre>"},{"location":"shortcode/#options","title":"Options:","text":""},{"location":"shortcode/#placeholder","title":"placeholder","text":"<ul> <li>Values: Any String</li> <li>Description: Determines the placeholder for search field</li> <li>Default: \"Search for\"</li> </ul>"},{"location":"shortcode/#columns","title":"columns","text":"<ul> <li>Values: 1 to 5</li> <li>Description: Determines how may results to show per row</li> <li>Default: 3</li> </ul>"},{"location":"shortcode/#post_types","title":"post_types","text":"<ul> <li>Values: Post Slugs e.g. <code>post,page,book</code></li> <li>Description: accepts enabled post_type slugs to show in instant search, accepts multiple slugs in comma separated form <code>post,page,slug</code> If multiple sources are enabled - filtering is disabled.</li> <li>Default: All enabled post_types</li> </ul>"},{"location":"shortcode/#filter","title":"filter","text":"<ul> <li>Values: <code>show</code> or <code>hide</code></li> <li>Description: accepts \"show\" or \"hide\" - determines if facet/category filtering should be shown.</li> <li>Default: <code>hide</code></li> </ul>"},{"location":"shortcode/#per_page","title":"per_page","text":"<ul> <li>Description: Determines no of possible/matched results to show per_page</li> <li>Default: 3</li> </ul>"},{"location":"shortcode/#sortby","title":"sortby","text":"<ul> <li>Values: <code>show</code> or <code>hide</code></li> <li>Description: Determines whether to provide a sorting option - by default sorting option is according to post published</li> <li>Default: <code>show</code></li> </ul>"},{"location":"shortcode/#pagination","title":"pagination","text":"<ul> <li>Values: <code>show</code> or <code>infinite</code> or <code>hide</code></li> <li>Description: Determines whether to show or hide the pagination for results, select infinite for load more implementation</li> <li>Default: <code>show</code></li> </ul>"},{"location":"shortcode/#query_by","title":"query_by","text":"<ul> <li>Values: string (Advanced Usage the typesense documentation)</li> <li>Description: Query results by these fields</li> <li>Default: <code>post_title,post_content</code></li> </ul>"},{"location":"shortcode/#sticky_first","title":"sticky_first","text":"<ul> <li>Values: <code>yes</code> or <code>no</code></li> <li>Description: Show sticky posts first ?</li> <li>Default: <code>no</code></li> </ul>"},{"location":"shortcode/#custom_class","title":"custom_class","text":"<ul> <li>Values: comma separated string of html class <code>my-custom-class-1,my-custom-class-2</code></li> <li>Description: Ability to add custom class</li> <li>Default: <code>empty</code></li> </ul>"},{"location":"shortcode/#selected_filters","title":"selected_filters","text":"<ul> <li>Values: <code>show</code> or <code>hide</code></li> <li>Description: Shows the selected filters </li> <li>Default: <code>show</code></li> </ul>"},{"location":"shortcode/#stats","title":"stats","text":"<ul> <li>Values: <code>show</code> or <code>hide</code></li> <li>Description: Shows or hide the number of search results retrieved</li> <li>Default: <code>show</code></li> </ul>"},{"location":"shortcode/#routing","title":"routing","text":"<ul> <li>Values: <code>enable</code> or <code>disable</code></li> <li>Description: Enable or Disable routing feature - this adds the selected search query / facets / filters of the current searches being made to the browser URL. Allowing users to share the current search state.</li> <li>Default: <code>disable</code></li> </ul>"},{"location":"shortcode/#autocomplete","title":"Autocomplete","text":""},{"location":"shortcode/#shortcode_1","title":"Shortcode","text":"<pre><code>[cm_typesense_autocomplete placeholder=\"Search for...\"\"]\n</code></pre> <p>Description: Add the Autocomplete form wherever you may want to. There are no other options.</p>"},{"location":"shortcode/#options_1","title":"Options:","text":""},{"location":"shortcode/#placeholder_1","title":"placeholder","text":"<ul> <li>Values: Any String</li> <li>Description: Determines the placeholder for search field</li> <li>Default: \"Search for\"</li> </ul>"},{"location":"shortcode/#query_by_1","title":"query_by","text":"<ul> <li>Values: Any String</li> <li>Description: Determines the search query</li> <li>Default: <code>post_title,post_content</code></li> </ul>"},{"location":"template-overriding/","title":"Overriding Template","text":"<p>Overriding the template allows you to change things of the output for your autocomplete or instant search design as you need to.</p> <ul> <li>Plugin base folder: <code>search-with-typesense/templates</code></li> </ul> <p>The templates are in the plugin <code>search-with-typesense/templates</code> and you can override it by copying it to your child theme.</p> <p>To override, copy files from <code>wp-content/plugins/search-with-typesense/templates/</code> folder to <code>wp-content/themes/your-theme/search-with-typesense/</code>,</p> <p>Then you can make the changes as you need. Copy the file <code>main-panel.php</code> from <code>wp-content/plugins/search-with-typesense/templates/instant-search/main-panel.php</code> to <code>wp-content/themes/your-theme/search-with-typesense/instant-search/main-panel.php</code>.</p>"},{"location":"tsfwc/","title":"Introduction","text":"<p>Typsense Search for WooCommerce is a premimum addon that provides robust, fast search functionality for WooCommerce products on your website. </p>"},{"location":"tsfwc/#features","title":"Features","text":"<ul> <li>Lightning-fast products search results in miliseconds</li> <li>Allow to override WooCommerce product search</li> <li>Allow to hijack WooCommerce shop and archive pages</li> <li>Provides result in WooCommerce default HTML structure</li> <li>Provides all the features for search and filter provided by WooCommerce but in a better and fast way</li> <li>Provides shortcodes for adding search in only specific locations.</li> <li>Hooks and filters for customizations</li> <li>Template Override for design customizations.</li> </ul>"},{"location":"tsfwc/#minimum-requirements","title":"Minimum Requirements","text":"<ul> <li>PHP 7.4 required or greater</li> <li>MySQL 5.6 or greater is recommended</li> <li>Search with Typsense</li> <li>WooCommerce</li> </ul>"},{"location":"tsfwc/#installation","title":"Installation","text":"<ol> <li>After purchasing from Codemanas, download the zip file</li> <li>Then on your site's dashboard, go to WordPress Plugins &gt; Add New &gt; Search for \"Search with Typesense\"</li> <li>Click Install and then activate Plugin </li> </ol>"},{"location":"tsfwc/#getting-started","title":"Getting started","text":""},{"location":"tsfwc/#activate-license","title":"Activate License","text":"<p>After activating the plugin, go to Typesense-&gt;Addons, then activate the license.</p> <p></p>"},{"location":"tsfwc/#indexing-products","title":"Indexing products","text":"<p>First you need to index i.e. push data to Typsense cloud. To do so, follow the below steps:</p> <ol> <li>Go to Typsense-&gt;Typesense</li> <li>Select the Products post type from the dropdown in Select Posts Types to Enable</li> <li>Then you can set the Products' label and max suggetion to be listed on autocomplete.</li> <li>After that, click the Index button to index. It may take few minutes depending upon the number of products you have.</li> <li>When the indexing is complete, you will get the success message and process is complete.</li> </ol> <p></p>"},{"location":"tsfwc/#settings","title":"Settings","text":"<p>The plugin provides the following default settings at Typesense-&gt;WooCommerce:</p> <ol> <li> <p>Replace Shop with Typesense - Replace shop with typesense search.</p> </li> <li> <p>Choose what Filters to Enable - Choose what filters to enable.</p> <ul> <li>category - Enable category filtering</li> <li>brands - Enable brands filtering</li> <li>price - Enable price filtering</li> <li>rating - Enable filtering by rating</li> <li>attributes - Enable filter by attributes</li> <li>sortby - Enable sortby<ul> <li>Recent</li> <li>Oldest</li> <li>Sort by rating: low to high</li> <li>Sort by rating: high to low</li> <li>Sort by price: low to high</li> <li>Sort by price: high to low</li> <li>Sort by Popularity</li> </ul> </li> </ul> </li> <li> <p>Pagination - Enable pagination of your choosing.</p> <ul> <li>Default - Enable the default pagination.</li> <li>Infinite - Enable the infinite pagination with 'show more' button.<ul> <li>Show More Text - This option is visible when you select the 'Infinite' option. After clicking the option it changes the text to 'show more .'</li> </ul> </li> </ul> </li> <li> <p>Routing - Enabling this option will activate routing, allowing you to share the URL with the applied filter.</p> <ul> <li>Search placeholder - Change placeholder text on the shop's search</li> </ul> </li> <li> <p>Replace Product Search - Replace product search with autocomplete search or instant search popup or show featured first.</p> <ul> <li>Autocomplete Search - Uses autocomplete search for product.</li> <li>Instant Search Popup - Uses instant search and shows results in popup format.</li> <li>Show featured first - shows the featured product first.</li> </ul> </li> <li> <p>Global Autocomplete Settings -Autocomplete the Submit button action that you choose.</p> <ul> <li>Keep Autocomplete Panel open -  Uses the autocomplete panel open for users </li> <li>Use Default Product Search - Uses the default panel for users.</li> </ul> </li> <li> <p>Advanced Settings - Gives the settings for more features.</p> <ul> <li>Make the default Category filter hierarchical menu - makes a default categories filter menu.<ul> <li>Please note that enabling it will be resource heavy for your site. Products need to be Delete and Re-indexed.</li> <li>What is Hierarchical Menu? Learn More</li> </ul> </li> </ul> </li> </ol> <p></p> <p>Note: Same settings are provided in Dashboard-&gt;Customize then WooCommerce-&gt;Typesense Settings for previewing the live changes.</p> <p></p>"},{"location":"tsfwc/#shortcodes","title":"Shortcodes","text":""},{"location":"tsfwc/#instant-search","title":"Instant search","text":"<p>Displays the instant search with products.</p> <p><code>[cm_tsfwc_search cat_filter='show' price_filter='show' rating_filter='show' attribute_filter='show' pagination='show' sortby='show' placeholder='Search products...' show_featured_first='no']</code></p>"},{"location":"tsfwc/#options","title":"Options:","text":"<p>cat_filter</p> <ul> <li>Value: <code>show</code> or <code>hide</code></li> <li>Description: Determines the showing or hiding of the category filter</li> <li>Default value: \"show\"</li> </ul> <p>brands_filter</p> <ul> <li>Value: <code>show</code> or <code>hide</code></li> <li>Description: Determines the showing or hiding of the brands filter</li> <li>Default value: \"show\"</li> </ul> <p>Note: Introduced from version 1.8.0 with the introduction of Brands custom taxonomy in WooCommerce v9.6. You need to Delete &amp; Re-Index for this to work properly and enable it.</p> <p>price_filter</p> <ul> <li>Value: <code>show</code> or <code>hide</code></li> <li>Description: Determines the showing or hiding of the price filter</li> <li>Default value: \"show\"</li> </ul> <p>rating_filter</p> <ul> <li>Value: <code>show</code> or <code>hide</code></li> <li>Description: Determines the showing or hiding of the rating filter</li> <li>Default value: \"show\"</li> </ul> <p>attribute_filter</p> <ul> <li>Value: <code>show</code> or <code>hide</code></li> <li>Description: Determines the showing or hiding of the attribute filter</li> <li>Default value: \"show\"</li> </ul> <p>pagination</p> <ul> <li>Value: <code>show</code> or <code>hide</code> or <code>infinite</code></li> <li>Description: Determines the showing or hiding or showing infinite results of pagination<ul> <li><code>show</code>: shows pagination.</li> <li><code>hide</code>: hides pagination.</li> <li><code>infinite</code>: shows a button for infinite results on button click.</li> </ul> </li> <li>Default value: \"show\"</li> </ul> <p>routing</p> <ul> <li>Value: <code>enable</code> or <code>disable</code></li> <li>Description: Enabling this will activate routing, allowing you to share the URL with the applied filter.</li> <li>Default value: \"disable\"</li> </ul> <p>sortby</p> <ul> <li>Value: <code>show</code> or <code>hide</code></li> <li>Description: Determines the showing or hiding of the sortby filter</li> <li>Default value: \"show\"</li> </ul> <p>placeholder</p> <ul> <li>Value: Any string</li> <li>Description: Placeholder text for the search input field</li> <li>Default value: \"Search products\"</li> </ul> <p>show_featured_first</p> <ul> <li>Value: <code>yes</code> or <code>no</code></li> <li>Description: Show the featured products first on the listing while searching or filtering</li> <li>Default value: \"no\"</li> </ul> <p>query_by</p> <ul> <li>Values: string (Advanced Usage the typesense documentation)</li> <li>Description: Query results by these fields</li> <li>Default: <code>post_title,post_content</code></li> </ul>"},{"location":"tsfwc/#autocomplete-search","title":"Autocomplete search","text":"<p>Displays the autocomplete form to search products.</p> <p><code>[cm_tsfwc_autocomplete_search placeholder=\"Search products\"]</code></p>"},{"location":"tsfwc/#options_1","title":"Options:","text":"<p>placeholder</p> <ul> <li>Value: string</li> <li>Description: Placeholder text for the search form</li> <li>Default value: empty</li> </ul>"},{"location":"tsfwc/#template-overwriting","title":"Template Overwriting","text":"<p>Overriding the template allows you to change the output for the product listing design as you need to.</p> <p>The templates are in the plugin <code>typesense-search-for-woocommerce/templates</code> and you can override it by copying it to your theme.</p> <p>To override, copy files from <code>wp-content/plugins/typesense-search-for-woocommerce/templates/</code> folder to <code>wp-content/themes/your-theme/search-with-typesense/woocommerce</code>. Then you can make the changes as you need.</p> <p>For example: if you want the filters to show up on the right instead of the left. </p> <ul> <li> <p>Copy the file <code>instant-search.php</code> from <code>typesense-search-for-woocommerce/templates/instant-search.php</code> to <code>your-theme/search-with-typesense/woocommerce/instant-search.php</code>. </p> </li> <li> <p>And change the div structure so that <code>filter-panel</code> is after <code>main-panel</code>.</p> </li> </ul> <p>End result: </p>"},{"location":"tsfwc/#action-hooks-filter-hooks-extending-plugin","title":"Action Hooks &amp; Filter Hooks / Extending Plugin","text":"<p>There are plenty of Hooks and Filters provided by the plugin to allow developers to customize or add additional functionality to the plugin</p>"},{"location":"tsfwc/#filter-hooks","title":"Filter Hooks:","text":"<p>Please see https://developer.wordpress.org/plugins/hooks/filters/ for details of what filters are in WordPress.</p> <p>cm_tsfwc_per_page_config</p> <ul> <li>Description: Change the per page listing and values</li> <li>Arguments: <code>$per_page_config</code> Array of configs with label and value   </li> <li>Default value:</li> </ul> <pre><code>    [\n        [ 'label' =&gt; 'Per page', 'value' =&gt; $atts['per_page'], 'default' =&gt; true ],\n        [ 'label' =&gt; '10 per page', 'value' =&gt; 10 ],\n        [ 'label' =&gt; '20 per page', 'value' =&gt; 20 ],\n        [ 'label' =&gt; '30 per page', 'value' =&gt; 30 ],\n        [ 'label' =&gt; '40 per page', 'value' =&gt; 40 ],\n        [ 'label' =&gt; '50 per page', 'value' =&gt; 50 ],\n    ]\n</code></pre> <p>cm_tsfwc_product_fields</p> <ul> <li>Description: Add new fields to schema to be indexed.</li> <li>Arguments: <code>$product_fields</code> Array of fields to be indexed.</li> </ul> <p>cm_tsfwc_data_before_entry</p> <ul> <li>Description: Add the formatted data to the added fields.</li> <li>Arguments:<ul> <li><code>$formatted_data</code> Array of data to be returned.</li> <li><code>$raw_data</code> Raw data containing product object </li> <li><code>$object_id</code> Object ID passed</li> <li><code>$schema_name</code> Name of the schema which is <code>product</code> in this case.</li> </ul> </li> </ul>"},{"location":"tsfwc/#action-hooks","title":"Action Hooks:","text":"<p>Please see https://developer.wordpress.org/plugins/hooks/actions/ for details of what action hooks are in WordPress.</p> <p>cm_tsfwc_custom_attributes</p> <ul> <li>Description: Hook to add custom attributes HTML to the structure</li> <li>Location: <code>templates/instant-search.php</code></li> </ul>"},{"location":"tsfwc/#change-per-page-dropdown-values-on-frontend","title":"Change per page dropdown values on frontend","text":""},{"location":"tsfwc/#use-case","title":"Use Case:","text":"<p>What if you want to change the 10 per page, 20 per page and so on value to your own custom, let's say 50 per page, 100 per page and so on.</p>"},{"location":"tsfwc/#how-to-do-it","title":"How to do it:","text":"<p>The plugin provides a filter: <code>cm_tsfwc_per_page_config</code> to change it.</p> <p>You can use it like below:</p> <pre><code>add_filter( 'cm_tsfwc_per_page_config', 'your_slug_change_per_page' );\n\nfunction your_slug_change_per_page( $per_page_config ) {\n    $per_page_config = [\n        [ 'label' =&gt; '50 per page', 'value' =&gt; 50, 'default' =&gt; true ], // one value should always have 'default' =&gt; true\n        [ 'label' =&gt; '100 per page', 'value' =&gt; 100 ],\n        [ 'label' =&gt; '150 per page', 'value' =&gt; 150 ],\n        [ 'label' =&gt; '200 per page', 'value' =&gt; 200 ],\n    ];\n    return $per_page_config;\n}\n</code></pre>"},{"location":"tsfwc/#adding-custom-taxonomy-as-filters","title":"Adding custom taxonomy as filters","text":""},{"location":"tsfwc/#use-case_1","title":"Use Case:","text":"<p>Suppose you want to add tags ( or any other custom taxonomy ) filter to the shop/archive page other than the default ones provided by the addon. </p>"},{"location":"tsfwc/#how-to-do-it_1","title":"How to do it:","text":""},{"location":"tsfwc/#format-the-document-data-to-be-indexed-as-facet","title":"Format the document data to be indexed as Facet","text":"<p>To add a new Facet you need to add it as .*_attribute_filter, so if you want to add product_tags  you can add it as  product_tags_attribute_filter</p> <pre><code>add_filter( 'cm_tsfwc_data_before_entry', 'your_slug_add_data_before_entry', 10, 4 );\n\nfunction your_slug_add_data_before_entry( $formatted_data, $raw_data, $object_id, $schema_name ) {\n\n    if( $schema_name === 'product' ) { // only add data if the schema is product \n\n        $product_tags = get_the_terms( $object_id, 'product_tag' );\n\n        $product_tags_arr = [];\n\n        if( ! is_wp_error( $product_tags ) ) {\n            foreach( $product_tags as $product_tag ) {\n                $product_tags_arr[] = $product_tag-&gt;name;\n            }\n        } else {\n            $product_tags_arr = []; // Only array can be pushed to the data. When no data, empty array is the must\n        }\n\n        $formatted_data['product_tags_attribute_filter'] = $product_tags_arr;\n    }\n\n    return $formatted_data;\n\n}\n\n</code></pre>"},{"location":"tsfwc/#displaying-the-filter","title":"Displaying the filter","text":"<p>To display the filter on the frontend, use the action hook <code>cm_tsfwc_custom_attributes</code> like below:</p> <pre><code>add_action( 'cm_tsfwc_custom_attributes', 'your_slug_add_custom_attr' );\n\nfunction your_slug_add_custom_attr() {\n    echo '&lt;div \n    data-attr_facet_name=\"product_tags_attribute_filter\" \n    data-title =\"' . __( \"Filter by Tags\", 'storefront' ) . '\" \n    data-attr_label =\"' . __( \"Tags\", 'storefront' ) . '\"\n    class=\"cm-tsfwc-shortcode-tags-attribute-filters\" \n    data-filter_type=\"refinementList\"\n    data-settings=\"' . _wp_specialchars( json_encode( [ \"searchable\" =&gt; false ] ), ENT_QUOTES, \"UTF-8\", true ) . '\"\n    &gt;&lt;/div&gt;';\n}\n\n</code></pre> <ul> <li> <p><code>data-attr_facet_name</code>: It should same as the name of the field added before.                     For example: here name of the field added before is <code>'product_tags_attribute_filter'</code> so the <code>data-attr_facet_name</code> should be <code>product_tags_attribute_filter</code></p> </li> <li> <p><code>data-title</code>: Title for the filter</p> </li> <li> <p><code>data-filter_type</code>: Type of filter to use</p> <ul> <li> <p>Values: <code>refinementList</code> <code>rangeSlider</code> <code>rangeInput</code> <code>menu</code> <code>dropdown</code></p> </li> <li> <p>Note:  For <code>rangeSlider</code> and <code>rangeInput</code> the schema for field must be <code>int64</code></p> </li> </ul> </li> </ul>"},{"location":"tsfwc/#adding-static-code-widgets-to-the-sidebar","title":"Adding static code / widgets to the sidebar","text":""},{"location":"tsfwc/#use-case_2","title":"Use Case:","text":"<p>Suppose you want to add default WooCommerce widgets like Top Rated Products below the filters</p>"},{"location":"tsfwc/#how-to-do-it_2","title":"How to do it:","text":""},{"location":"tsfwc/#use-cm_tsfwc_filter_panel_output-hook","title":"Use <code>cm_tsfwc_filter_panel_output</code> hook","text":"<pre><code>add_action( 'cm_tsfwc_filter_panel_output', 'mytheme_add_widgets',40 );\n\nfunction mytheme_add_widgets() {\n    the_widget( 'WC_Widget_Top_Rated_Products' );\n}\n\n</code></pre>"},{"location":"tsfwc/#removing-attribute-filter","title":"Removing attribute filter","text":""},{"location":"tsfwc/#use-case_3","title":"Use Case:","text":"<p>Suppose you want to remove Filter by <code>size</code> filter. </p>"},{"location":"tsfwc/#use-cm_tsfwc_attribute_facet_skip-hook","title":"Use <code>cm_tsfwc_attribute_facet_skip</code> hook","text":"<pre><code>add_filter( 'cm_tsfwc_attribute_facet_skip', 'mytheme_hide_attribute_facet' );\n\nfunction mytheme_hide_attribute_facet() {\n    return ['size']; // Value should be the attribute value registered in WooCommerce\n}\n</code></pre>"},{"location":"tsfwc/#changing-attribute-widget-type","title":"Changing attribute widget type","text":""},{"location":"tsfwc/#changing-type-of-widget-in-category-filter","title":"Changing type of widget in Category filter","text":"<pre><code>function your_slug_change_cat_filter_type( $filterType ) {\n\n    $filterType = 'menu';\n\n    return $filterType;\n}\n\nadd_filter( 'cm_tsfwc_category_filter_type', 'your_slug_change_cat_filter_type' );\n</code></pre> <p>** Acceptable filter type = <code>refinementList</code>, <code>menu</code> **</p>"},{"location":"tsfwc/#changing-type-of-widget-in-price-filter","title":"Changing type of widget in Price filter","text":"<pre><code>function your_slug_change_price_filter_type( $filterType ) {\n\n    $filterType = 'rangeSlider';\n\n    return $filterType;\n}\n\nadd_filter( 'cm_tsfwc_price_filter_type', 'your_slug_change_price_filter_type' );\n</code></pre> <p>** Acceptable filter type = <code>rangeSlider</code>, <code>rangeInput</code> **</p>"},{"location":"tsfwc/#changing-type-of-widget-in-rating-filter","title":"Changing type of widget in Rating filter","text":"<pre><code>function your_slug_change_rating_filter_type( $filterType ) {\n\n    $filterType = 'rangeSlider';\n\n    return $filterType;\n}\n\nadd_filter( 'cm_tsfwc_rating_filter_type', 'your_slug_change_rating_filter_type' );\n</code></pre> <p>** Acceptable filter type = <code>ratingMenu</code>, <code>rangeSlider</code>, <code>rangeInput</code> **</p>"},{"location":"tsfwc/#changing-type-of-widget-in-attribute-filters","title":"Changing type of widget in Attribute filters","text":"<pre><code>function your_slug_change_attribute_filter_type( $filterType, $attributeName ) {\n\n    if ( $attributeName == 'size' ) {\n        $filterType = 'menu';\n    }\n\n    return $filterType;\n}\n\nadd_filter( 'cm_tsfwc_attribute_filter_type', 'your_slug_change_attribute_filter_type', 10, 2 );\n</code></pre> <p>** Acceptable filter type = <code>refinementList</code>, <code>menu</code> <code>rangeInput</code>, <code>rangeSlider</code> **</p> <p>Note:  For <code>rangeSlider</code> and <code>rangeInput</code> the schema for field must be <code>int64</code></p>"},{"location":"tsfwc/#addingchanging-facets-settings","title":"Adding/changing facets settings","text":""},{"location":"tsfwc/#changing-facet-settings-in-category-filter","title":"Changing facet settings in Category filter","text":"<pre><code>function your_slug_change_facet_setting( $filterSettings ) {\n\n    $filterSettings = [ 'searchable' =&gt; true ];\n\n    return $filterSettings;\n}\n\nadd_filter( 'cm_tsfwc_category_facet_settings', 'your_slug_change_facet_setting' );\n</code></pre> <p>See here for available options.</p> <p>Note: <code>container</code> and <code>attribute</code> are not overridable</p>"},{"location":"tsfwc/#changing-facet-settings-in-price-filter","title":"Changing facet settings in Price filter","text":"<pre><code>function your_slug_change_facet_setting( $filterSettings ) {\n\n    $filterSettings = [ 'pips' =&gt; false ];\n\n    return $filterSettings;\n}\n\nadd_filter( 'cm_tsfwc_price_facet_settings', 'your_slug_change_facet_setting' );\n</code></pre> <p>See here for available options.</p> <p>Note: <code>container</code> and <code>attribute</code> are not overridable</p>"},{"location":"tsfwc/#changing-facet-settings-in-rating-filter","title":"Changing facet settings in Rating filter","text":"<pre><code>function your_slug_change_facet_setting( $filterSettings ) {\n\n    $filterSettings = [ 'max' =&gt; 5 ];\n\n    return $filterSettings;\n}\n\nadd_filter( 'cm_tsfwc_rating_facet_settings', 'your_slug_change_facet_setting' );\n</code></pre> <p>See here for available options.</p>"},{"location":"tsfwc/#changing-facet-settings-in-custom-attribute-filter","title":"Changing facet settings in Custom Attribute filter","text":"<pre><code>function your_slug_change_facet_setting( $filterSettings, $attrName ) {\n\n    if( 'color' == $attrName ) {\n        $filterSettings = [ 'searchable' =&gt; true ];\n    }\n\n    return $filterSettings;\n}\n\nadd_filter( 'cm_tsfwc_attribute_facet_settings', 'your_slug_change_facet_setting', 10, 2 );\n</code></pre> <p>See here for available options.</p> <p>Note: <code>container</code> and <code>attribute</code> are not overridable</p>"},{"location":"tsfwc/#wpml-integration","title":"WPML Integration","text":"<p>As of version 1.2.4 of Typesense search for WooCommerce - the plugin is compatible with WPML and adds features to integrate with WPML + WooCommerce The plugins required for WPML Integration are :</p>"},{"location":"tsfwc/#pre-requisites","title":"Pre-requisites","text":"<ul> <li>WooCommerce Multilingual</li> <li>WPML 4.4.11 or aboves</li> <li>WPML String Translation</li> <li>WPML Translation Management (not needed for WooCommerce 3.9.0)</li> <li>Typesense Search for WooCommerce</li> </ul> <p>If you want to use different media (images) for different translations of a product, you need to install WPML Media.</p>"},{"location":"tsfwc/#wpml-translation-modes-and-tools","title":"WPML Translation modes and tools","text":"<p>There are two different translation modes while using WPML. Please see WPML documentation for detailed information.</p> <ul> <li>Translate Everything :   All of the site\u2019s main content will be automatically translated into all secondary languages as content is published   or updated. Translations can then be reviewed on the front-end and edited by the user (or local translator) if   needed.</li> <li>Translate Some :   Users can pick and choose what to translate, when to translate it, and who will translate it.   This mode allows for content to be translated manually, translated via WPML\u2019s Advanced Translation Editor, translated by professional translation services , or even translated   by a team of local translators.</li> </ul>"},{"location":"tsfwc/#translating-content","title":"Translating Content:","text":"<p>For translation of content - there is nothing new you need to do on the typesense plugin. Based on your setup the WooCommerce Products, Pages (checkout, cart, my-account etc), translations are handled by the WooCommerce Multilingual plugin - please see translating products</p> <p>What is required for Typesense integration is only on initial installation. You would need to index your products for each language you have.</p>"},{"location":"tsfwc/#indexing-products_1","title":"Indexing Products:","text":"<p>To index products you will need to go to WP Admin &gt; Typesense Here you will be shown the Typesense Search Config settings and you can index the products. The only difference here is to switch language on your admin screen for each of your language to index your products. This step - is a one time step - meaning it only needs to be done once - when the plugin is initially configured. Please see video for a small walk through.</p> <p>Once the indexing is complete, all your current products will show up in the shop and users will be show the products based on the current language the user has selected. For new products - they will be indexed to the correct translation - when they are added / updated. And will be removed if they are deleted / status visibility of product is changed.</p>"},{"location":"tsfwc/#translating-plugin-strings","title":"Translating Plugin Strings","text":"<p>Some strings are hardcoded into the plugin and will require string translation. You can see detailed documentation for string translation here. Please see this short video on how to translate strings.</p> <p>Note: <code>container</code> and <code>attribute</code> are not overridable</p>"},{"location":"tsfwc/#making-category-menu-filter-a-hierarchical-menu","title":"Making category menu filter a hierarchical menu","text":"<p>Hierarchical menu is a navigaton based on a hierarchy of attributes like category and it's subcategories. See below for example:</p> <p></p> <p>From version <code>1.3.5</code>, we have added an option to change the defalut category menu filter to hierarchical menu. Follow the below steps:</p> <ol> <li>Go to Dashboard -&gt; Typesense -&gt; WooCommerce</li> <li>In Advance Settings, enable the Make the default Category filter hierarchical menu</li> <li>Click Save Changes button</li> <li>After saving, you need to Delete and Re-index your Products from Typesense-&gt;Typesense in Search Configuration tab.</li> </ol> <p>Please note that enabling this option will be resource heavy and may make your backend slow.</p> <p>This is because WooCommerce does not provide the default hierarchy of the products' categories and subcategories. So we have to manually query all the categoires and make a hierarchy which in itself is a heavy process. Further more, on adding, updating and deleting of a category, we have to repeat the proess and index again.</p>"},{"location":"tsfwc/#additional-search-parameters-for-default-search-configuration","title":"Additional search parameters for default search configuration","text":"<p>From version <code>1.3.7</code>, you can configure additional search parameters for both Instant search and Autocomplete using the filter hooks mentioned below:</p> <p><code>cm_tsfwc_additional_search_params</code> -  Configure instant search additional search parameters</p> <p><code>cm_tsfwc_additional_autocomplete_params</code> - Configure autocomplete search additional search parameters</p> <p>Example code:</p> <pre><code>add_filter( 'cm_tsfwc_additional_search_params', 'theme_slug_alter_search_params' );\nfunction theme_slug_alter_search_params() {\n    return [\n        'hidden_hits' =&gt; 3662,\n        // 'query_by_weights' =&gt; '1,2', \n        // 'query_by' =&gt; \"post_content,post_title\",\n        // 'sort_by' =&gt; 'total_sales:asc', // work only with numerical fields\n        // 'filter_by' =&gt; 'post_title: test',\n        // 'facet_by' =&gt; 'category,prices', // can not override so dont work\n        // 'max_facet_values' =&gt; 1, // can not override so don't work\n        // 'facet_query' =&gt; 'category_lvl0: Alaram',\n        // 'num_typos' =&gt; 2,\n        // 'page' =&gt; 2, // cannot override so don't work\n        // 'group_by' =&gt; 'category',\n        // 'highlightFullFields' =&gt; 'post_title,post_content,test',\n        // 'include_fields' =&gt; 'price,prices',\n        // 'pinned_hits' =&gt; '3662:2',\n    ];\n}\n</code></pre> <p>You can refer here: https://typesense.org/docs/0.23.1/api/search.html#search-parameters for additional parameters. </p> <p>Note: Some parameters like <code>facet_by, q, max_facet_values, page</code> can not be overwritten. Others can be passed as required.</p>"},{"location":"tsfwc/#search-only-after-certain-character-length","title":"Search only after certain character length","text":"<p>From version <code>1.4.8</code>, you can configure search to be triggered after certain characters are typed on search bar. The new filter introduced is  <code>cm_tsfwc_search_query_length</code></p> <p>You can use the hook like below. The below code triggers search only when 4 character is typed on search bar:</p> <pre><code>add_filter( 'cm_tsfwc_search_query_length', 'your_slug_serach_after_char_count' ); \n\nfunction your_slug_serach_after_char_count( $count ) {\n    $count = 4;\n    return $count;\n}\n\n</code></pre>"},{"location":"unset-cat-from-page/","title":"Remove category field from Page's schema","text":"<p>By default, the schema of <code>page</code> gets the same schema as <code>post</code>. That means <code>page</code> will also have <code>category</code> and <code>cat_links</code> in it's schema. But that is redundent since page does not have categories. So those fields should be removed from page's schema.</p> <p>To remove the fields, paste the below code in your theme's <code>functions.php</code></p> <pre><code> add_filter( 'cm_typesense_schema', 'remove_cat_facet_from_page', 10, 2 );\n\n function remove_cat_facet_from_page( $schema, $name ) {\n    if ( $name == 'page' ) {\n        foreach( $schema['fields'] as $index =&gt; $field ) {\n            if( 'category' == $field['name'] || 'cat_link' == $field['name'] ) {\n                unset( $schema['fields'][ $index ]);\n            }            \n        }\n    }\n\n    // Should be sorted because unset removes the index number only and leave empty in between\n    sort( $schema['fields']);\n    return $schema;\n}\n</code></pre> <p>Note: After implementing this, <code>page</code> has to be reindexed by clicking <code>Delete and Re-index</code> on settings page</p>"},{"location":"wp-cli/","title":"WP CLI","text":""},{"location":"wp-cli/#wp-cli","title":"WP CLI","text":"<p>WP-CLI serves as the command-line interface for WordPress, offering a range of commands for various actions typically executed in the WordPress admin.</p> <p>Within the framework of the Search With Typesense plugin, our plugin introduces its own set of WP-CLI commands. These commands enable you to index and delete post types, with the flexibility to specify particular IDs. Additionally, the plugin provides an option to assess the health status of the Typesense server.</p> <p>This is very helpful if you have command line access to your WordPress installation instace on your server.</p> <p>Kindly be aware that the subsequent commands will not remove your posts from the WordPress database. Instead, these commands exclusively index or delete the posts on your Typesense Server.</p> <p>Note: We intend to incorporate additional commands in the future based on your requests. Your feedback would be highly valuable.</p>"},{"location":"wp-cli/#supported-commands","title":"Supported Commands","text":""},{"location":"wp-cli/#wp-typesense-index","title":"wp typesense index","text":"<p>Index a specific post type to Typesense server</p>"},{"location":"wp-cli/#options","title":"Options","text":"<p>     Slug of the post type you want to index. <p>[--ids=] <p>The comma separated IDs of the posts of that post type you want to index.</p>"},{"location":"wp-cli/#examples","title":"Examples","text":"<pre><code># Index all the default posts\n$ wp typesense index post\n</code></pre> <pre><code># Index all only specific posts with IDs: 2,3 and 4 for the custom post type 'books'\n$ wp typesense index books --ids=2,3,4\n</code></pre>"},{"location":"wp-cli/#wp-typesense-delete","title":"wp typesense delete","text":"<p>Delete a specific post type from Typesense server</p>"},{"location":"wp-cli/#options_1","title":"Options","text":"<p> <p>Slug of the post type you want to delete.</p> <p>[--ids=] <p>The comma separated IDs of the posts of that post type you want to delete.</p>"},{"location":"wp-cli/#examples_1","title":"Examples","text":"<pre><code># Drop the post collection from server\n$ wp typesense delete post\n</code></pre> <p>Note: This will drop the post collection from the Typesense server</p> <pre><code># delete all only specific posts with IDs: 2,3 and 4 for the custom post type 'books'\n$ wp typesense delete books --ids=2,3,4\n</code></pre>"},{"location":"wp-cli/#wp-typesense-delete-reindex","title":"wp typesense delete-reindex","text":"<p>Delete/drop the collection and reindex the collections with documents</p>"},{"location":"wp-cli/#wp-typesense-health","title":"wp typesense health","text":"<p>Check the health status of your Typesense server.</p>"},{"location":"wp-cli/#examples_2","title":"Examples","text":"<pre><code>$ wp typesense health\n</code></pre>"}]}